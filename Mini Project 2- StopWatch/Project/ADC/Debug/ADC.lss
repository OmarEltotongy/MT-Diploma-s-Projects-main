
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000028c8  0000293c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c98  00000000  00000000  00002954  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b8a  00000000  00000000  000045ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005176  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000052b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005426  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000706f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000090f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000098c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 26 06 	call	0xc4c	; 0xc4c <main>
      7a:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e6       	ldi	r26, 0x6D	; 109
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e6       	ldi	r24, 0x6D	; 109
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ADC_init>:
#include <avr/io.h>
#include "ADC_Driver.h"
#include "std_types.h"

void ADC_init(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,REFS0);
     b3e:	a7 e2       	ldi	r26, 0x27	; 39
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e7 e2       	ldi	r30, 0x27	; 39
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	80 64       	ori	r24, 0x40	; 64
     b4a:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,REFS1);
     b4c:	a7 e2       	ldi	r26, 0x27	; 39
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	e7 e2       	ldi	r30, 0x27	; 39
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8f 77       	andi	r24, 0x7F	; 127
     b58:	8c 93       	st	X, r24

	CLEAR_BIT(ADMUX,MUX0);
     b5a:	a7 e2       	ldi	r26, 0x27	; 39
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e7 e2       	ldi	r30, 0x27	; 39
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	8e 7f       	andi	r24, 0xFE	; 254
     b66:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,MUX1);
     b68:	a7 e2       	ldi	r26, 0x27	; 39
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e7 e2       	ldi	r30, 0x27	; 39
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	8d 7f       	andi	r24, 0xFD	; 253
     b74:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,MUX2);
     b76:	a7 e2       	ldi	r26, 0x27	; 39
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e7 e2       	ldi	r30, 0x27	; 39
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	8b 7f       	andi	r24, 0xFB	; 251
     b82:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,MUX3);
     b84:	a7 e2       	ldi	r26, 0x27	; 39
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e7 e2       	ldi	r30, 0x27	; 39
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	87 7f       	andi	r24, 0xF7	; 247
     b90:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,MUX4);
     b92:	a7 e2       	ldi	r26, 0x27	; 39
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e7 e2       	ldi	r30, 0x27	; 39
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8f 7e       	andi	r24, 0xEF	; 239
     b9e:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADEN);
     ba0:	a6 e2       	ldi	r26, 0x26	; 38
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e6 e2       	ldi	r30, 0x26	; 38
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	80 68       	ori	r24, 0x80	; 128
     bac:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,ADIE);
     bae:	a6 e2       	ldi	r26, 0x26	; 38
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e6 e2       	ldi	r30, 0x26	; 38
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	87 7f       	andi	r24, 0xF7	; 247
     bba:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADPS0);
     bbc:	a6 e2       	ldi	r26, 0x26	; 38
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e6 e2       	ldi	r30, 0x26	; 38
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	81 60       	ori	r24, 0x01	; 1
     bc8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     bca:	a6 e2       	ldi	r26, 0x26	; 38
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e6 e2       	ldi	r30, 0x26	; 38
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	82 60       	ori	r24, 0x02	; 2
     bd6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
     bd8:	a6 e2       	ldi	r26, 0x26	; 38
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e6 e2       	ldi	r30, 0x26	; 38
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	84 60       	ori	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24

}
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <ADC_readchannel>:

uint16 ADC_readchannel(uint8 Ch_num)
{
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	0f 92       	push	r0
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
     bf6:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=(ADMUX & 0XE0)|(Ch_num & 0X3F);
     bf8:	a7 e2       	ldi	r26, 0x27	; 39
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e7 e2       	ldi	r30, 0x27	; 39
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	98 2f       	mov	r25, r24
     c04:	90 7e       	andi	r25, 0xE0	; 224
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	8f 73       	andi	r24, 0x3F	; 63
     c0a:	89 2b       	or	r24, r25
     c0c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
     c0e:	a6 e2       	ldi	r26, 0x26	; 38
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e6 e2       	ldi	r30, 0x26	; 38
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	80 64       	ori	r24, 0x40	; 64
     c1a:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
     c1c:	e6 e2       	ldi	r30, 0x26	; 38
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	88 2f       	mov	r24, r24
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	80 71       	andi	r24, 0x10	; 16
     c28:	90 70       	andi	r25, 0x00	; 0
     c2a:	00 97       	sbiw	r24, 0x00	; 0
     c2c:	b9 f3       	breq	.-18     	; 0xc1c <ADC_readchannel+0x30>
	SET_BIT(ADCSRA,ADIF);
     c2e:	a6 e2       	ldi	r26, 0x26	; 38
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e6 e2       	ldi	r30, 0x26	; 38
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	80 61       	ori	r24, 0x10	; 16
     c3a:	8c 93       	st	X, r24
	return ADC;
     c3c:	e4 e2       	ldi	r30, 0x24	; 36
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	91 81       	ldd	r25, Z+1	; 0x01
}
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <main>:
 */
#include "ADC_Driver.h"
#include "lcd.h"

int main(void)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	00 d0       	rcall	.+0      	; 0xc52 <main+0x6>
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
	uint16 res_value;
	LCD_init(); /* initialize LCD driver */
     c56:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_init>
	ADC_init(); /* initialize ADC driver */
     c5a:	0e 94 9b 05 	call	0xb36	; 0xb36 <ADC_init>

	/* Display this string "ADC Value = " only once on LCD at the first row */
	LCD_displayString("ADC Value = ");
     c5e:	80 e6       	ldi	r24, 0x60	; 96
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayString>
    while(1)
    {
    	/* Read ADC channel 0 where the potentiometer is connected */
		res_value = ADC_readchannel(0);
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	0e 94 f6 05 	call	0xbec	; 0xbec <ADC_readchannel>
     c6c:	9a 83       	std	Y+2, r25	; 0x02
     c6e:	89 83       	std	Y+1, r24	; 0x01

		/* Display the ADC digital value every time at same position */
		LCD_moveCursor(0,12);
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	6c e0       	ldi	r22, 0x0C	; 12
     c74:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_moveCursor>
		if(res_value >= 1000)
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	9a 81       	ldd	r25, Y+2	; 0x02
     c7c:	23 e0       	ldi	r18, 0x03	; 3
     c7e:	88 3e       	cpi	r24, 0xE8	; 232
     c80:	92 07       	cpc	r25, r18
     c82:	28 f0       	brcs	.+10     	; 0xc8e <main+0x42>
		{
			LCD_intgerToString(res_value);
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	9a 81       	ldd	r25, Y+2	; 0x02
     c88:	0e 94 b9 13 	call	0x2772	; 0x2772 <LCD_intgerToString>
     c8c:	ec cf       	rjmp	.-40     	; 0xc66 <main+0x1a>
		}
		else
		{
			LCD_intgerToString(res_value);
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	0e 94 b9 13 	call	0x2772	; 0x2772 <LCD_intgerToString>
			/* In case the digital value is three or two or one digits print space in the next digit place */
			LCD_displayCharacter(' ');
     c96:	80 e2       	ldi	r24, 0x20	; 32
     c98:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayCharacter>
     c9c:	e4 cf       	rjmp	.-56     	; 0xc66 <main+0x1a>

00000c9e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <GPIO_setupPinDirection+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <GPIO_setupPinDirection+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	88 30       	cpi	r24, 0x08	; 8
     cb6:	08 f0       	brcs	.+2      	; 0xcba <GPIO_setupPinDirection+0x1c>
     cb8:	d5 c0       	rjmp	.+426    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	84 30       	cpi	r24, 0x04	; 4
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <GPIO_setupPinDirection+0x24>
     cc0:	d1 c0       	rjmp	.+418    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	3d 83       	std	Y+5, r19	; 0x05
     cca:	2c 83       	std	Y+4, r18	; 0x04
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	9d 81       	ldd	r25, Y+5	; 0x05
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	91 05       	cpc	r25, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <GPIO_setupPinDirection+0x3a>
     cd6:	43 c0       	rjmp	.+134    	; 0xd5e <GPIO_setupPinDirection+0xc0>
     cd8:	2c 81       	ldd	r18, Y+4	; 0x04
     cda:	3d 81       	ldd	r19, Y+5	; 0x05
     cdc:	22 30       	cpi	r18, 0x02	; 2
     cde:	31 05       	cpc	r19, r1
     ce0:	2c f4       	brge	.+10     	; 0xcec <GPIO_setupPinDirection+0x4e>
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	9d 81       	ldd	r25, Y+5	; 0x05
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	71 f0       	breq	.+28     	; 0xd06 <GPIO_setupPinDirection+0x68>
     cea:	bc c0       	rjmp	.+376    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
     cec:	2c 81       	ldd	r18, Y+4	; 0x04
     cee:	3d 81       	ldd	r19, Y+5	; 0x05
     cf0:	22 30       	cpi	r18, 0x02	; 2
     cf2:	31 05       	cpc	r19, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <GPIO_setupPinDirection+0x5a>
     cf6:	5f c0       	rjmp	.+190    	; 0xdb6 <GPIO_setupPinDirection+0x118>
     cf8:	8c 81       	ldd	r24, Y+4	; 0x04
     cfa:	9d 81       	ldd	r25, Y+5	; 0x05
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	91 05       	cpc	r25, r1
     d00:	09 f4       	brne	.+2      	; 0xd04 <GPIO_setupPinDirection+0x66>
     d02:	85 c0       	rjmp	.+266    	; 0xe0e <GPIO_setupPinDirection+0x170>
     d04:	af c0       	rjmp	.+350    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	a1 f4       	brne	.+40     	; 0xd34 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d0c:	aa e3       	ldi	r26, 0x3A	; 58
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ea e3       	ldi	r30, 0x3A	; 58
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <GPIO_setupPinDirection+0x8c>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <GPIO_setupPinDirection+0x88>
     d2e:	84 2b       	or	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	98 c0       	rjmp	.+304    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d34:	aa e3       	ldi	r26, 0x3A	; 58
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ea e3       	ldi	r30, 0x3A	; 58
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <GPIO_setupPinDirection+0xb4>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <GPIO_setupPinDirection+0xb0>
     d56:	80 95       	com	r24
     d58:	84 23       	and	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	83 c0       	rjmp	.+262    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	a1 f4       	brne	.+40     	; 0xd8c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d64:	a7 e3       	ldi	r26, 0x37	; 55
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e7 e3       	ldi	r30, 0x37	; 55
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <GPIO_setupPinDirection+0xe4>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <GPIO_setupPinDirection+0xe0>
     d86:	84 2b       	or	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	6c c0       	rjmp	.+216    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     d8c:	a7 e3       	ldi	r26, 0x37	; 55
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e7 e3       	ldi	r30, 0x37	; 55
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	48 2f       	mov	r20, r24
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 2e       	mov	r0, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <GPIO_setupPinDirection+0x10c>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <GPIO_setupPinDirection+0x108>
     dae:	80 95       	com	r24
     db0:	84 23       	and	r24, r20
     db2:	8c 93       	st	X, r24
     db4:	57 c0       	rjmp	.+174    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	a1 f4       	brne	.+40     	; 0xde4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     dbc:	a4 e3       	ldi	r26, 0x34	; 52
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e4 e3       	ldi	r30, 0x34	; 52
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	48 2f       	mov	r20, r24
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <GPIO_setupPinDirection+0x13c>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <GPIO_setupPinDirection+0x138>
     dde:	84 2b       	or	r24, r20
     de0:	8c 93       	st	X, r24
     de2:	40 c0       	rjmp	.+128    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     de4:	a4 e3       	ldi	r26, 0x34	; 52
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e4 e3       	ldi	r30, 0x34	; 52
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <GPIO_setupPinDirection+0x164>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <GPIO_setupPinDirection+0x160>
     e06:	80 95       	com	r24
     e08:	84 23       	and	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	2b c0       	rjmp	.+86     	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	a1 f4       	brne	.+40     	; 0xe3c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e14:	a1 e3       	ldi	r26, 0x31	; 49
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e1 e3       	ldi	r30, 0x31	; 49
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <GPIO_setupPinDirection+0x194>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <GPIO_setupPinDirection+0x190>
     e36:	84 2b       	or	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	14 c0       	rjmp	.+40     	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e3c:	a1 e3       	ldi	r26, 0x31	; 49
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e1 e3       	ldi	r30, 0x31	; 49
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <GPIO_setupPinDirection+0x1bc>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <GPIO_setupPinDirection+0x1b8>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <GPIO_writePin+0x6>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <GPIO_writePin+0x8>
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	6a 83       	std	Y+2, r22	; 0x02
     e86:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	88 30       	cpi	r24, 0x08	; 8
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <GPIO_writePin+0x1c>
     e8e:	d5 c0       	rjmp	.+426    	; 0x103a <GPIO_writePin+0x1c6>
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	84 30       	cpi	r24, 0x04	; 4
     e94:	08 f0       	brcs	.+2      	; 0xe98 <GPIO_writePin+0x24>
     e96:	d1 c0       	rjmp	.+418    	; 0x103a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	3d 83       	std	Y+5, r19	; 0x05
     ea0:	2c 83       	std	Y+4, r18	; 0x04
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	91 05       	cpc	r25, r1
     eaa:	09 f4       	brne	.+2      	; 0xeae <GPIO_writePin+0x3a>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <GPIO_writePin+0xc0>
     eae:	2c 81       	ldd	r18, Y+4	; 0x04
     eb0:	3d 81       	ldd	r19, Y+5	; 0x05
     eb2:	22 30       	cpi	r18, 0x02	; 2
     eb4:	31 05       	cpc	r19, r1
     eb6:	2c f4       	brge	.+10     	; 0xec2 <GPIO_writePin+0x4e>
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	9d 81       	ldd	r25, Y+5	; 0x05
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	71 f0       	breq	.+28     	; 0xedc <GPIO_writePin+0x68>
     ec0:	bc c0       	rjmp	.+376    	; 0x103a <GPIO_writePin+0x1c6>
     ec2:	2c 81       	ldd	r18, Y+4	; 0x04
     ec4:	3d 81       	ldd	r19, Y+5	; 0x05
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	09 f4       	brne	.+2      	; 0xece <GPIO_writePin+0x5a>
     ecc:	5f c0       	rjmp	.+190    	; 0xf8c <GPIO_writePin+0x118>
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	91 05       	cpc	r25, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <GPIO_writePin+0x66>
     ed8:	85 c0       	rjmp	.+266    	; 0xfe4 <GPIO_writePin+0x170>
     eda:	af c0       	rjmp	.+350    	; 0x103a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	a1 f4       	brne	.+40     	; 0xf0a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     ee2:	ab e3       	ldi	r26, 0x3B	; 59
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	eb e3       	ldi	r30, 0x3B	; 59
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <GPIO_writePin+0x8c>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <GPIO_writePin+0x88>
     f04:	84 2b       	or	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	98 c0       	rjmp	.+304    	; 0x103a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f0a:	ab e3       	ldi	r26, 0x3B	; 59
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	eb e3       	ldi	r30, 0x3B	; 59
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <GPIO_writePin+0xb4>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <GPIO_writePin+0xb0>
     f2c:	80 95       	com	r24
     f2e:	84 23       	and	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	83 c0       	rjmp	.+262    	; 0x103a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	a1 f4       	brne	.+40     	; 0xf62 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     f3a:	a8 e3       	ldi	r26, 0x38	; 56
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e8 e3       	ldi	r30, 0x38	; 56
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <GPIO_writePin+0xe4>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <GPIO_writePin+0xe0>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	6c c0       	rjmp	.+216    	; 0x103a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     f62:	a8 e3       	ldi	r26, 0x38	; 56
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e8 e3       	ldi	r30, 0x38	; 56
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <GPIO_writePin+0x10c>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <GPIO_writePin+0x108>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	57 c0       	rjmp	.+174    	; 0x103a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	a1 f4       	brne	.+40     	; 0xfba <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f92:	a5 e3       	ldi	r26, 0x35	; 53
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e5 e3       	ldi	r30, 0x35	; 53
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <GPIO_writePin+0x13c>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <GPIO_writePin+0x138>
     fb4:	84 2b       	or	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	40 c0       	rjmp	.+128    	; 0x103a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     fba:	a5 e3       	ldi	r26, 0x35	; 53
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e5 e3       	ldi	r30, 0x35	; 53
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <GPIO_writePin+0x164>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <GPIO_writePin+0x160>
     fdc:	80 95       	com	r24
     fde:	84 23       	and	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	2b c0       	rjmp	.+86     	; 0x103a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	a1 f4       	brne	.+40     	; 0x1012 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     fea:	a2 e3       	ldi	r26, 0x32	; 50
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e2 e3       	ldi	r30, 0x32	; 50
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <GPIO_writePin+0x194>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <GPIO_writePin+0x190>
    100c:	84 2b       	or	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	14 c0       	rjmp	.+40     	; 0x103a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1012:	a2 e3       	ldi	r26, 0x32	; 50
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e2 e3       	ldi	r30, 0x32	; 50
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <GPIO_writePin+0x1bc>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <GPIO_writePin+0x1b8>
    1034:	80 95       	com	r24
    1036:	84 23       	and	r24, r20
    1038:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <GPIO_readPin+0x6>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <GPIO_readPin+0x8>
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	8a 83       	std	Y+2, r24	; 0x02
    105a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    105c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	88 30       	cpi	r24, 0x08	; 8
    1062:	08 f0       	brcs	.+2      	; 0x1066 <GPIO_readPin+0x1c>
    1064:	84 c0       	rjmp	.+264    	; 0x116e <GPIO_readPin+0x124>
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	84 30       	cpi	r24, 0x04	; 4
    106a:	08 f0       	brcs	.+2      	; 0x106e <GPIO_readPin+0x24>
    106c:	80 c0       	rjmp	.+256    	; 0x116e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	3d 83       	std	Y+5, r19	; 0x05
    1076:	2c 83       	std	Y+4, r18	; 0x04
    1078:	4c 81       	ldd	r20, Y+4	; 0x04
    107a:	5d 81       	ldd	r21, Y+5	; 0x05
    107c:	41 30       	cpi	r20, 0x01	; 1
    107e:	51 05       	cpc	r21, r1
    1080:	79 f1       	breq	.+94     	; 0x10e0 <GPIO_readPin+0x96>
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	91 05       	cpc	r25, r1
    108a:	34 f4       	brge	.+12     	; 0x1098 <GPIO_readPin+0x4e>
    108c:	2c 81       	ldd	r18, Y+4	; 0x04
    108e:	3d 81       	ldd	r19, Y+5	; 0x05
    1090:	21 15       	cp	r18, r1
    1092:	31 05       	cpc	r19, r1
    1094:	69 f0       	breq	.+26     	; 0x10b0 <GPIO_readPin+0x66>
    1096:	6b c0       	rjmp	.+214    	; 0x116e <GPIO_readPin+0x124>
    1098:	4c 81       	ldd	r20, Y+4	; 0x04
    109a:	5d 81       	ldd	r21, Y+5	; 0x05
    109c:	42 30       	cpi	r20, 0x02	; 2
    109e:	51 05       	cpc	r21, r1
    10a0:	b9 f1       	breq	.+110    	; 0x1110 <GPIO_readPin+0xc6>
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	91 05       	cpc	r25, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <GPIO_readPin+0x64>
    10ac:	49 c0       	rjmp	.+146    	; 0x1140 <GPIO_readPin+0xf6>
    10ae:	5f c0       	rjmp	.+190    	; 0x116e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    10b0:	e9 e3       	ldi	r30, 0x39	; 57
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	a9 01       	movw	r20, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <GPIO_readPin+0x7e>
    10c4:	55 95       	asr	r21
    10c6:	47 95       	ror	r20
    10c8:	8a 95       	dec	r24
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <GPIO_readPin+0x7a>
    10cc:	ca 01       	movw	r24, r20
    10ce:	81 70       	andi	r24, 0x01	; 1
    10d0:	90 70       	andi	r25, 0x00	; 0
    10d2:	88 23       	and	r24, r24
    10d4:	19 f0       	breq	.+6      	; 0x10dc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	49 c0       	rjmp	.+146    	; 0x116e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10dc:	19 82       	std	Y+1, r1	; 0x01
    10de:	47 c0       	rjmp	.+142    	; 0x116e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    10e0:	e6 e3       	ldi	r30, 0x36	; 54
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a9 01       	movw	r20, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <GPIO_readPin+0xae>
    10f4:	55 95       	asr	r21
    10f6:	47 95       	ror	r20
    10f8:	8a 95       	dec	r24
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <GPIO_readPin+0xaa>
    10fc:	ca 01       	movw	r24, r20
    10fe:	81 70       	andi	r24, 0x01	; 1
    1100:	90 70       	andi	r25, 0x00	; 0
    1102:	88 23       	and	r24, r24
    1104:	19 f0       	breq	.+6      	; 0x110c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	31 c0       	rjmp	.+98     	; 0x116e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    110c:	19 82       	std	Y+1, r1	; 0x01
    110e:	2f c0       	rjmp	.+94     	; 0x116e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1110:	e3 e3       	ldi	r30, 0x33	; 51
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a9 01       	movw	r20, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <GPIO_readPin+0xde>
    1124:	55 95       	asr	r21
    1126:	47 95       	ror	r20
    1128:	8a 95       	dec	r24
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <GPIO_readPin+0xda>
    112c:	ca 01       	movw	r24, r20
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	90 70       	andi	r25, 0x00	; 0
    1132:	88 23       	and	r24, r24
    1134:	19 f0       	breq	.+6      	; 0x113c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	19 c0       	rjmp	.+50     	; 0x116e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    113c:	19 82       	std	Y+1, r1	; 0x01
    113e:	17 c0       	rjmp	.+46     	; 0x116e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1140:	e0 e3       	ldi	r30, 0x30	; 48
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a9 01       	movw	r20, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <GPIO_readPin+0x10e>
    1154:	55 95       	asr	r21
    1156:	47 95       	ror	r20
    1158:	8a 95       	dec	r24
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <GPIO_readPin+0x10a>
    115c:	ca 01       	movw	r24, r20
    115e:	81 70       	andi	r24, 0x01	; 1
    1160:	90 70       	andi	r25, 0x00	; 0
    1162:	88 23       	and	r24, r24
    1164:	19 f0       	breq	.+6      	; 0x116c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	89 83       	std	Y+1, r24	; 0x01
    116a:	01 c0       	rjmp	.+2      	; 0x116e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    116c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    116e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	00 d0       	rcall	.+0      	; 0x1186 <GPIO_setupPortDirection+0x6>
    1186:	00 d0       	rcall	.+0      	; 0x1188 <GPIO_setupPortDirection+0x8>
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	84 30       	cpi	r24, 0x04	; 4
    1194:	90 f5       	brcc	.+100    	; 0x11fa <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3c 83       	std	Y+4, r19	; 0x04
    119e:	2b 83       	std	Y+3, r18	; 0x03
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	91 05       	cpc	r25, r1
    11a8:	d1 f0       	breq	.+52     	; 0x11de <GPIO_setupPortDirection+0x5e>
    11aa:	2b 81       	ldd	r18, Y+3	; 0x03
    11ac:	3c 81       	ldd	r19, Y+4	; 0x04
    11ae:	22 30       	cpi	r18, 0x02	; 2
    11b0:	31 05       	cpc	r19, r1
    11b2:	2c f4       	brge	.+10     	; 0x11be <GPIO_setupPortDirection+0x3e>
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	61 f0       	breq	.+24     	; 0x11d4 <GPIO_setupPortDirection+0x54>
    11bc:	1e c0       	rjmp	.+60     	; 0x11fa <GPIO_setupPortDirection+0x7a>
    11be:	2b 81       	ldd	r18, Y+3	; 0x03
    11c0:	3c 81       	ldd	r19, Y+4	; 0x04
    11c2:	22 30       	cpi	r18, 0x02	; 2
    11c4:	31 05       	cpc	r19, r1
    11c6:	81 f0       	breq	.+32     	; 0x11e8 <GPIO_setupPortDirection+0x68>
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	91 05       	cpc	r25, r1
    11d0:	81 f0       	breq	.+32     	; 0x11f2 <GPIO_setupPortDirection+0x72>
    11d2:	13 c0       	rjmp	.+38     	; 0x11fa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    11d4:	ea e3       	ldi	r30, 0x3A	; 58
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	80 83       	st	Z, r24
    11dc:	0e c0       	rjmp	.+28     	; 0x11fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    11de:	e7 e3       	ldi	r30, 0x37	; 55
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	80 83       	st	Z, r24
    11e6:	09 c0       	rjmp	.+18     	; 0x11fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    11e8:	e4 e3       	ldi	r30, 0x34	; 52
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	80 83       	st	Z, r24
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    11f2:	e1 e3       	ldi	r30, 0x31	; 49
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	80 83       	st	Z, r24
			break;
		}
	}
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	00 d0       	rcall	.+0      	; 0x120e <GPIO_writePort+0x6>
    120e:	00 d0       	rcall	.+0      	; 0x1210 <GPIO_writePort+0x8>
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	84 30       	cpi	r24, 0x04	; 4
    121c:	90 f5       	brcc	.+100    	; 0x1282 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	3c 83       	std	Y+4, r19	; 0x04
    1226:	2b 83       	std	Y+3, r18	; 0x03
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	9c 81       	ldd	r25, Y+4	; 0x04
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	91 05       	cpc	r25, r1
    1230:	d1 f0       	breq	.+52     	; 0x1266 <GPIO_writePort+0x5e>
    1232:	2b 81       	ldd	r18, Y+3	; 0x03
    1234:	3c 81       	ldd	r19, Y+4	; 0x04
    1236:	22 30       	cpi	r18, 0x02	; 2
    1238:	31 05       	cpc	r19, r1
    123a:	2c f4       	brge	.+10     	; 0x1246 <GPIO_writePort+0x3e>
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	61 f0       	breq	.+24     	; 0x125c <GPIO_writePort+0x54>
    1244:	1e c0       	rjmp	.+60     	; 0x1282 <GPIO_writePort+0x7a>
    1246:	2b 81       	ldd	r18, Y+3	; 0x03
    1248:	3c 81       	ldd	r19, Y+4	; 0x04
    124a:	22 30       	cpi	r18, 0x02	; 2
    124c:	31 05       	cpc	r19, r1
    124e:	81 f0       	breq	.+32     	; 0x1270 <GPIO_writePort+0x68>
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	83 30       	cpi	r24, 0x03	; 3
    1256:	91 05       	cpc	r25, r1
    1258:	81 f0       	breq	.+32     	; 0x127a <GPIO_writePort+0x72>
    125a:	13 c0       	rjmp	.+38     	; 0x1282 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    125c:	eb e3       	ldi	r30, 0x3B	; 59
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	80 83       	st	Z, r24
    1264:	0e c0       	rjmp	.+28     	; 0x1282 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1266:	e8 e3       	ldi	r30, 0x38	; 56
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	80 83       	st	Z, r24
    126e:	09 c0       	rjmp	.+18     	; 0x1282 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1270:	e5 e3       	ldi	r30, 0x35	; 53
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	80 83       	st	Z, r24
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    127a:	e2 e3       	ldi	r30, 0x32	; 50
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	80 83       	st	Z, r24
			break;
		}
	}
}
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	00 d0       	rcall	.+0      	; 0x1296 <GPIO_readPort+0x6>
    1296:	00 d0       	rcall	.+0      	; 0x1298 <GPIO_readPort+0x8>
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    129e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	84 30       	cpi	r24, 0x04	; 4
    12a4:	90 f5       	brcc	.+100    	; 0x130a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	3c 83       	std	Y+4, r19	; 0x04
    12ae:	2b 83       	std	Y+3, r18	; 0x03
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	91 05       	cpc	r25, r1
    12b8:	d1 f0       	breq	.+52     	; 0x12ee <GPIO_readPort+0x5e>
    12ba:	2b 81       	ldd	r18, Y+3	; 0x03
    12bc:	3c 81       	ldd	r19, Y+4	; 0x04
    12be:	22 30       	cpi	r18, 0x02	; 2
    12c0:	31 05       	cpc	r19, r1
    12c2:	2c f4       	brge	.+10     	; 0x12ce <GPIO_readPort+0x3e>
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	61 f0       	breq	.+24     	; 0x12e4 <GPIO_readPort+0x54>
    12cc:	1e c0       	rjmp	.+60     	; 0x130a <GPIO_readPort+0x7a>
    12ce:	2b 81       	ldd	r18, Y+3	; 0x03
    12d0:	3c 81       	ldd	r19, Y+4	; 0x04
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	81 f0       	breq	.+32     	; 0x12f8 <GPIO_readPort+0x68>
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	91 05       	cpc	r25, r1
    12e0:	81 f0       	breq	.+32     	; 0x1302 <GPIO_readPort+0x72>
    12e2:	13 c0       	rjmp	.+38     	; 0x130a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    12e4:	e9 e3       	ldi	r30, 0x39	; 57
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	0e c0       	rjmp	.+28     	; 0x130a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    12ee:	e6 e3       	ldi	r30, 0x36	; 54
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	09 c0       	rjmp	.+18     	; 0x130a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    12f8:	e3 e3       	ldi	r30, 0x33	; 51
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	04 c0       	rjmp	.+8      	; 0x130a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1302:	e0 e3       	ldi	r30, 0x30	; 48
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    130a:	89 81       	ldd	r24, Y+1	; 0x01
}
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	2e 97       	sbiw	r28, 0x0e	; 14
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	61 e0       	ldi	r22, 0x01	; 1
    1332:	41 e0       	ldi	r20, 0x01	; 1
    1334:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	62 e0       	ldi	r22, 0x02	; 2
    133c:	41 e0       	ldi	r20, 0x01	; 1
    133e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a0 ea       	ldi	r26, 0xA0	; 160
    1348:	b1 e4       	ldi	r27, 0x41	; 65
    134a:	8b 87       	std	Y+11, r24	; 0x0b
    134c:	9c 87       	std	Y+12, r25	; 0x0c
    134e:	ad 87       	std	Y+13, r26	; 0x0d
    1350:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1352:	6b 85       	ldd	r22, Y+11	; 0x0b
    1354:	7c 85       	ldd	r23, Y+12	; 0x0c
    1356:	8d 85       	ldd	r24, Y+13	; 0x0d
    1358:	9e 85       	ldd	r25, Y+14	; 0x0e
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	4a e7       	ldi	r20, 0x7A	; 122
    1360:	55 e4       	ldi	r21, 0x45	; 69
    1362:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	8f 83       	std	Y+7, r24	; 0x07
    136c:	98 87       	std	Y+8, r25	; 0x08
    136e:	a9 87       	std	Y+9, r26	; 0x09
    1370:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1372:	6f 81       	ldd	r22, Y+7	; 0x07
    1374:	78 85       	ldd	r23, Y+8	; 0x08
    1376:	89 85       	ldd	r24, Y+9	; 0x09
    1378:	9a 85       	ldd	r25, Y+10	; 0x0a
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e8       	ldi	r20, 0x80	; 128
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1386:	88 23       	and	r24, r24
    1388:	2c f4       	brge	.+10     	; 0x1394 <LCD_init+0x7a>
		__ticks = 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	9e 83       	std	Y+6, r25	; 0x06
    1390:	8d 83       	std	Y+5, r24	; 0x05
    1392:	3f c0       	rjmp	.+126    	; 0x1412 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1394:	6f 81       	ldd	r22, Y+7	; 0x07
    1396:	78 85       	ldd	r23, Y+8	; 0x08
    1398:	89 85       	ldd	r24, Y+9	; 0x09
    139a:	9a 85       	ldd	r25, Y+10	; 0x0a
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	3f ef       	ldi	r19, 0xFF	; 255
    13a0:	4f e7       	ldi	r20, 0x7F	; 127
    13a2:	57 e4       	ldi	r21, 0x47	; 71
    13a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13a8:	18 16       	cp	r1, r24
    13aa:	4c f5       	brge	.+82     	; 0x13fe <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e2       	ldi	r20, 0x20	; 32
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	bc 01       	movw	r22, r24
    13c6:	cd 01       	movw	r24, r26
    13c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	9e 83       	std	Y+6, r25	; 0x06
    13d2:	8d 83       	std	Y+5, r24	; 0x05
    13d4:	0f c0       	rjmp	.+30     	; 0x13f4 <LCD_init+0xda>
    13d6:	80 e9       	ldi	r24, 0x90	; 144
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	9c 83       	std	Y+4, r25	; 0x04
    13dc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <LCD_init+0xc8>
    13e6:	9c 83       	std	Y+4, r25	; 0x04
    13e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ea:	8d 81       	ldd	r24, Y+5	; 0x05
    13ec:	9e 81       	ldd	r25, Y+6	; 0x06
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	9e 83       	std	Y+6, r25	; 0x06
    13f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	69 f7       	brne	.-38     	; 0x13d6 <LCD_init+0xbc>
    13fc:	14 c0       	rjmp	.+40     	; 0x1426 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1400:	78 85       	ldd	r23, Y+8	; 0x08
    1402:	89 85       	ldd	r24, Y+9	; 0x09
    1404:	9a 85       	ldd	r25, Y+10	; 0x0a
    1406:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	9e 81       	ldd	r25, Y+6	; 0x06
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	9a 81       	ldd	r25, Y+2	; 0x02
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <LCD_init+0x104>
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	63 e0       	ldi	r22, 0x03	; 3
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	64 e0       	ldi	r22, 0x04	; 4
    1434:	41 e0       	ldi	r20, 0x01	; 1
    1436:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	65 e0       	ldi	r22, 0x05	; 5
    143e:	41 e0       	ldi	r20, 0x01	; 1
    1440:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	66 e0       	ldi	r22, 0x06	; 6
    1448:	41 e0       	ldi	r20, 0x01	; 1
    144a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    144e:	83 e3       	ldi	r24, 0x33	; 51
    1450:	0e 94 3f 0a 	call	0x147e	; 0x147e <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1454:	82 e3       	ldi	r24, 0x32	; 50
    1456:	0e 94 3f 0a 	call	0x147e	; 0x147e <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    145a:	88 e2       	ldi	r24, 0x28	; 40
    145c:	0e 94 3f 0a 	call	0x147e	; 0x147e <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1460:	8c e0       	ldi	r24, 0x0C	; 12
    1462:	0e 94 3f 0a 	call	0x147e	; 0x147e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	0e 94 3f 0a 	call	0x147e	; 0x147e <LCD_sendCommand>
}
    146c:	2e 96       	adiw	r28, 0x0e	; 14
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	c3 56       	subi	r28, 0x63	; 99
    148c:	d0 40       	sbci	r29, 0x00	; 0
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	fe 01       	movw	r30, r28
    149a:	ed 59       	subi	r30, 0x9D	; 157
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	61 e0       	ldi	r22, 0x01	; 1
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    14aa:	fe 01       	movw	r30, r28
    14ac:	e1 5a       	subi	r30, 0xA1	; 161
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a0 e8       	ldi	r26, 0x80	; 128
    14b6:	bf e3       	ldi	r27, 0x3F	; 63
    14b8:	80 83       	st	Z, r24
    14ba:	91 83       	std	Z+1, r25	; 0x01
    14bc:	a2 83       	std	Z+2, r26	; 0x02
    14be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c0:	8e 01       	movw	r16, r28
    14c2:	05 5a       	subi	r16, 0xA5	; 165
    14c4:	1f 4f       	sbci	r17, 0xFF	; 255
    14c6:	fe 01       	movw	r30, r28
    14c8:	e1 5a       	subi	r30, 0xA1	; 161
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	60 81       	ld	r22, Z
    14ce:	71 81       	ldd	r23, Z+1	; 0x01
    14d0:	82 81       	ldd	r24, Z+2	; 0x02
    14d2:	93 81       	ldd	r25, Z+3	; 0x03
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	4a e7       	ldi	r20, 0x7A	; 122
    14da:	55 e4       	ldi	r21, 0x45	; 69
    14dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	f8 01       	movw	r30, r16
    14e6:	80 83       	st	Z, r24
    14e8:	91 83       	std	Z+1, r25	; 0x01
    14ea:	a2 83       	std	Z+2, r26	; 0x02
    14ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14ee:	fe 01       	movw	r30, r28
    14f0:	e5 5a       	subi	r30, 0xA5	; 165
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	60 81       	ld	r22, Z
    14f6:	71 81       	ldd	r23, Z+1	; 0x01
    14f8:	82 81       	ldd	r24, Z+2	; 0x02
    14fa:	93 81       	ldd	r25, Z+3	; 0x03
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e8       	ldi	r20, 0x80	; 128
    1502:	5f e3       	ldi	r21, 0x3F	; 63
    1504:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1508:	88 23       	and	r24, r24
    150a:	44 f4       	brge	.+16     	; 0x151c <LCD_sendCommand+0x9e>
		__ticks = 1;
    150c:	fe 01       	movw	r30, r28
    150e:	e7 5a       	subi	r30, 0xA7	; 167
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	80 83       	st	Z, r24
    151a:	64 c0       	rjmp	.+200    	; 0x15e4 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    151c:	fe 01       	movw	r30, r28
    151e:	e5 5a       	subi	r30, 0xA5	; 165
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	60 81       	ld	r22, Z
    1524:	71 81       	ldd	r23, Z+1	; 0x01
    1526:	82 81       	ldd	r24, Z+2	; 0x02
    1528:	93 81       	ldd	r25, Z+3	; 0x03
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	3f ef       	ldi	r19, 0xFF	; 255
    152e:	4f e7       	ldi	r20, 0x7F	; 127
    1530:	57 e4       	ldi	r21, 0x47	; 71
    1532:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1536:	18 16       	cp	r1, r24
    1538:	0c f0       	brlt	.+2      	; 0x153c <LCD_sendCommand+0xbe>
    153a:	43 c0       	rjmp	.+134    	; 0x15c2 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153c:	fe 01       	movw	r30, r28
    153e:	e1 5a       	subi	r30, 0xA1	; 161
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	60 81       	ld	r22, Z
    1544:	71 81       	ldd	r23, Z+1	; 0x01
    1546:	82 81       	ldd	r24, Z+2	; 0x02
    1548:	93 81       	ldd	r25, Z+3	; 0x03
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e2       	ldi	r20, 0x20	; 32
    1550:	51 e4       	ldi	r21, 0x41	; 65
    1552:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	8e 01       	movw	r16, r28
    155c:	07 5a       	subi	r16, 0xA7	; 167
    155e:	1f 4f       	sbci	r17, 0xFF	; 255
    1560:	bc 01       	movw	r22, r24
    1562:	cd 01       	movw	r24, r26
    1564:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	f8 01       	movw	r30, r16
    156e:	91 83       	std	Z+1, r25	; 0x01
    1570:	80 83       	st	Z, r24
    1572:	1f c0       	rjmp	.+62     	; 0x15b2 <LCD_sendCommand+0x134>
    1574:	fe 01       	movw	r30, r28
    1576:	e9 5a       	subi	r30, 0xA9	; 169
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	80 e9       	ldi	r24, 0x90	; 144
    157c:	91 e0       	ldi	r25, 0x01	; 1
    157e:	91 83       	std	Z+1, r25	; 0x01
    1580:	80 83       	st	Z, r24
    1582:	fe 01       	movw	r30, r28
    1584:	e9 5a       	subi	r30, 0xA9	; 169
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 81       	ld	r24, Z
    158a:	91 81       	ldd	r25, Z+1	; 0x01
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <LCD_sendCommand+0x10e>
    1590:	fe 01       	movw	r30, r28
    1592:	e9 5a       	subi	r30, 0xA9	; 169
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	91 83       	std	Z+1, r25	; 0x01
    1598:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159a:	de 01       	movw	r26, r28
    159c:	a7 5a       	subi	r26, 0xA7	; 167
    159e:	bf 4f       	sbci	r27, 0xFF	; 255
    15a0:	fe 01       	movw	r30, r28
    15a2:	e7 5a       	subi	r30, 0xA7	; 167
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	80 81       	ld	r24, Z
    15a8:	91 81       	ldd	r25, Z+1	; 0x01
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	11 96       	adiw	r26, 0x01	; 1
    15ae:	9c 93       	st	X, r25
    15b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b2:	fe 01       	movw	r30, r28
    15b4:	e7 5a       	subi	r30, 0xA7	; 167
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	80 81       	ld	r24, Z
    15ba:	91 81       	ldd	r25, Z+1	; 0x01
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	d1 f6       	brne	.-76     	; 0x1574 <LCD_sendCommand+0xf6>
    15c0:	27 c0       	rjmp	.+78     	; 0x1610 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c2:	8e 01       	movw	r16, r28
    15c4:	07 5a       	subi	r16, 0xA7	; 167
    15c6:	1f 4f       	sbci	r17, 0xFF	; 255
    15c8:	fe 01       	movw	r30, r28
    15ca:	e5 5a       	subi	r30, 0xA5	; 165
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	60 81       	ld	r22, Z
    15d0:	71 81       	ldd	r23, Z+1	; 0x01
    15d2:	82 81       	ldd	r24, Z+2	; 0x02
    15d4:	93 81       	ldd	r25, Z+3	; 0x03
    15d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	f8 01       	movw	r30, r16
    15e0:	91 83       	std	Z+1, r25	; 0x01
    15e2:	80 83       	st	Z, r24
    15e4:	de 01       	movw	r26, r28
    15e6:	ab 5a       	subi	r26, 0xAB	; 171
    15e8:	bf 4f       	sbci	r27, 0xFF	; 255
    15ea:	fe 01       	movw	r30, r28
    15ec:	e7 5a       	subi	r30, 0xA7	; 167
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	80 81       	ld	r24, Z
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	8d 93       	st	X+, r24
    15f6:	9c 93       	st	X, r25
    15f8:	fe 01       	movw	r30, r28
    15fa:	eb 5a       	subi	r30, 0xAB	; 171
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	80 81       	ld	r24, Z
    1600:	91 81       	ldd	r25, Z+1	; 0x01
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <LCD_sendCommand+0x184>
    1606:	fe 01       	movw	r30, r28
    1608:	eb 5a       	subi	r30, 0xAB	; 171
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	62 e0       	ldi	r22, 0x02	; 2
    1614:	41 e0       	ldi	r20, 0x01	; 1
    1616:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    161a:	fe 01       	movw	r30, r28
    161c:	ef 5a       	subi	r30, 0xAF	; 175
    161e:	ff 4f       	sbci	r31, 0xFF	; 255
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a0 e8       	ldi	r26, 0x80	; 128
    1626:	bf e3       	ldi	r27, 0x3F	; 63
    1628:	80 83       	st	Z, r24
    162a:	91 83       	std	Z+1, r25	; 0x01
    162c:	a2 83       	std	Z+2, r26	; 0x02
    162e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1630:	8e 01       	movw	r16, r28
    1632:	03 5b       	subi	r16, 0xB3	; 179
    1634:	1f 4f       	sbci	r17, 0xFF	; 255
    1636:	fe 01       	movw	r30, r28
    1638:	ef 5a       	subi	r30, 0xAF	; 175
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	60 81       	ld	r22, Z
    163e:	71 81       	ldd	r23, Z+1	; 0x01
    1640:	82 81       	ldd	r24, Z+2	; 0x02
    1642:	93 81       	ldd	r25, Z+3	; 0x03
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	4a e7       	ldi	r20, 0x7A	; 122
    164a:	55 e4       	ldi	r21, 0x45	; 69
    164c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	f8 01       	movw	r30, r16
    1656:	80 83       	st	Z, r24
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	a2 83       	std	Z+2, r26	; 0x02
    165c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    165e:	fe 01       	movw	r30, r28
    1660:	e3 5b       	subi	r30, 0xB3	; 179
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	60 81       	ld	r22, Z
    1666:	71 81       	ldd	r23, Z+1	; 0x01
    1668:	82 81       	ldd	r24, Z+2	; 0x02
    166a:	93 81       	ldd	r25, Z+3	; 0x03
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	40 e8       	ldi	r20, 0x80	; 128
    1672:	5f e3       	ldi	r21, 0x3F	; 63
    1674:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1678:	88 23       	and	r24, r24
    167a:	44 f4       	brge	.+16     	; 0x168c <LCD_sendCommand+0x20e>
		__ticks = 1;
    167c:	fe 01       	movw	r30, r28
    167e:	e5 5b       	subi	r30, 0xB5	; 181
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	91 83       	std	Z+1, r25	; 0x01
    1688:	80 83       	st	Z, r24
    168a:	64 c0       	rjmp	.+200    	; 0x1754 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    168c:	fe 01       	movw	r30, r28
    168e:	e3 5b       	subi	r30, 0xB3	; 179
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	60 81       	ld	r22, Z
    1694:	71 81       	ldd	r23, Z+1	; 0x01
    1696:	82 81       	ldd	r24, Z+2	; 0x02
    1698:	93 81       	ldd	r25, Z+3	; 0x03
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	3f ef       	ldi	r19, 0xFF	; 255
    169e:	4f e7       	ldi	r20, 0x7F	; 127
    16a0:	57 e4       	ldi	r21, 0x47	; 71
    16a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16a6:	18 16       	cp	r1, r24
    16a8:	0c f0       	brlt	.+2      	; 0x16ac <LCD_sendCommand+0x22e>
    16aa:	43 c0       	rjmp	.+134    	; 0x1732 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ac:	fe 01       	movw	r30, r28
    16ae:	ef 5a       	subi	r30, 0xAF	; 175
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	60 81       	ld	r22, Z
    16b4:	71 81       	ldd	r23, Z+1	; 0x01
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	93 81       	ldd	r25, Z+3	; 0x03
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e2       	ldi	r20, 0x20	; 32
    16c0:	51 e4       	ldi	r21, 0x41	; 65
    16c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	8e 01       	movw	r16, r28
    16cc:	05 5b       	subi	r16, 0xB5	; 181
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	bc 01       	movw	r22, r24
    16d2:	cd 01       	movw	r24, r26
    16d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	f8 01       	movw	r30, r16
    16de:	91 83       	std	Z+1, r25	; 0x01
    16e0:	80 83       	st	Z, r24
    16e2:	1f c0       	rjmp	.+62     	; 0x1722 <LCD_sendCommand+0x2a4>
    16e4:	fe 01       	movw	r30, r28
    16e6:	e7 5b       	subi	r30, 0xB7	; 183
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	80 e9       	ldi	r24, 0x90	; 144
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	91 83       	std	Z+1, r25	; 0x01
    16f0:	80 83       	st	Z, r24
    16f2:	fe 01       	movw	r30, r28
    16f4:	e7 5b       	subi	r30, 0xB7	; 183
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	80 81       	ld	r24, Z
    16fa:	91 81       	ldd	r25, Z+1	; 0x01
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <LCD_sendCommand+0x27e>
    1700:	fe 01       	movw	r30, r28
    1702:	e7 5b       	subi	r30, 0xB7	; 183
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170a:	de 01       	movw	r26, r28
    170c:	a5 5b       	subi	r26, 0xB5	; 181
    170e:	bf 4f       	sbci	r27, 0xFF	; 255
    1710:	fe 01       	movw	r30, r28
    1712:	e5 5b       	subi	r30, 0xB5	; 181
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	80 81       	ld	r24, Z
    1718:	91 81       	ldd	r25, Z+1	; 0x01
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	11 96       	adiw	r26, 0x01	; 1
    171e:	9c 93       	st	X, r25
    1720:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1722:	fe 01       	movw	r30, r28
    1724:	e5 5b       	subi	r30, 0xB5	; 181
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	80 81       	ld	r24, Z
    172a:	91 81       	ldd	r25, Z+1	; 0x01
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	d1 f6       	brne	.-76     	; 0x16e4 <LCD_sendCommand+0x266>
    1730:	27 c0       	rjmp	.+78     	; 0x1780 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1732:	8e 01       	movw	r16, r28
    1734:	05 5b       	subi	r16, 0xB5	; 181
    1736:	1f 4f       	sbci	r17, 0xFF	; 255
    1738:	fe 01       	movw	r30, r28
    173a:	e3 5b       	subi	r30, 0xB3	; 179
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	60 81       	ld	r22, Z
    1740:	71 81       	ldd	r23, Z+1	; 0x01
    1742:	82 81       	ldd	r24, Z+2	; 0x02
    1744:	93 81       	ldd	r25, Z+3	; 0x03
    1746:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	f8 01       	movw	r30, r16
    1750:	91 83       	std	Z+1, r25	; 0x01
    1752:	80 83       	st	Z, r24
    1754:	de 01       	movw	r26, r28
    1756:	a9 5b       	subi	r26, 0xB9	; 185
    1758:	bf 4f       	sbci	r27, 0xFF	; 255
    175a:	fe 01       	movw	r30, r28
    175c:	e5 5b       	subi	r30, 0xB5	; 181
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	80 81       	ld	r24, Z
    1762:	91 81       	ldd	r25, Z+1	; 0x01
    1764:	8d 93       	st	X+, r24
    1766:	9c 93       	st	X, r25
    1768:	fe 01       	movw	r30, r28
    176a:	e9 5b       	subi	r30, 0xB9	; 185
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	80 81       	ld	r24, Z
    1770:	91 81       	ldd	r25, Z+1	; 0x01
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <LCD_sendCommand+0x2f4>
    1776:	fe 01       	movw	r30, r28
    1778:	e9 5b       	subi	r30, 0xB9	; 185
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1780:	fe 01       	movw	r30, r28
    1782:	ed 59       	subi	r30, 0x9D	; 157
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	80 81       	ld	r24, Z
    1788:	88 2f       	mov	r24, r24
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	80 71       	andi	r24, 0x10	; 16
    178e:	90 70       	andi	r25, 0x00	; 0
    1790:	95 95       	asr	r25
    1792:	87 95       	ror	r24
    1794:	95 95       	asr	r25
    1796:	87 95       	ror	r24
    1798:	95 95       	asr	r25
    179a:	87 95       	ror	r24
    179c:	95 95       	asr	r25
    179e:	87 95       	ror	r24
    17a0:	98 2f       	mov	r25, r24
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	63 e0       	ldi	r22, 0x03	; 3
    17a6:	49 2f       	mov	r20, r25
    17a8:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    17ac:	fe 01       	movw	r30, r28
    17ae:	ed 59       	subi	r30, 0x9D	; 157
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	80 81       	ld	r24, Z
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	80 72       	andi	r24, 0x20	; 32
    17ba:	90 70       	andi	r25, 0x00	; 0
    17bc:	95 95       	asr	r25
    17be:	87 95       	ror	r24
    17c0:	95 95       	asr	r25
    17c2:	87 95       	ror	r24
    17c4:	95 95       	asr	r25
    17c6:	87 95       	ror	r24
    17c8:	95 95       	asr	r25
    17ca:	87 95       	ror	r24
    17cc:	95 95       	asr	r25
    17ce:	87 95       	ror	r24
    17d0:	98 2f       	mov	r25, r24
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	64 e0       	ldi	r22, 0x04	; 4
    17d6:	49 2f       	mov	r20, r25
    17d8:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    17dc:	fe 01       	movw	r30, r28
    17de:	ed 59       	subi	r30, 0x9D	; 157
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	80 81       	ld	r24, Z
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	80 74       	andi	r24, 0x40	; 64
    17ea:	90 70       	andi	r25, 0x00	; 0
    17ec:	08 2e       	mov	r0, r24
    17ee:	89 2f       	mov	r24, r25
    17f0:	00 0c       	add	r0, r0
    17f2:	88 1f       	adc	r24, r24
    17f4:	99 0b       	sbc	r25, r25
    17f6:	00 0c       	add	r0, r0
    17f8:	88 1f       	adc	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	98 2f       	mov	r25, r24
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	65 e0       	ldi	r22, 0x05	; 5
    1802:	49 2f       	mov	r20, r25
    1804:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1808:	fe 01       	movw	r30, r28
    180a:	ed 59       	subi	r30, 0x9D	; 157
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	80 81       	ld	r24, Z
    1810:	98 2f       	mov	r25, r24
    1812:	99 1f       	adc	r25, r25
    1814:	99 27       	eor	r25, r25
    1816:	99 1f       	adc	r25, r25
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	66 e0       	ldi	r22, 0x06	; 6
    181c:	49 2f       	mov	r20, r25
    181e:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    1822:	fe 01       	movw	r30, r28
    1824:	ed 5b       	subi	r30, 0xBD	; 189
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	a0 e8       	ldi	r26, 0x80	; 128
    182e:	bf e3       	ldi	r27, 0x3F	; 63
    1830:	80 83       	st	Z, r24
    1832:	91 83       	std	Z+1, r25	; 0x01
    1834:	a2 83       	std	Z+2, r26	; 0x02
    1836:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1838:	8e 01       	movw	r16, r28
    183a:	01 5c       	subi	r16, 0xC1	; 193
    183c:	1f 4f       	sbci	r17, 0xFF	; 255
    183e:	fe 01       	movw	r30, r28
    1840:	ed 5b       	subi	r30, 0xBD	; 189
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	60 81       	ld	r22, Z
    1846:	71 81       	ldd	r23, Z+1	; 0x01
    1848:	82 81       	ldd	r24, Z+2	; 0x02
    184a:	93 81       	ldd	r25, Z+3	; 0x03
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	4a e7       	ldi	r20, 0x7A	; 122
    1852:	55 e4       	ldi	r21, 0x45	; 69
    1854:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	f8 01       	movw	r30, r16
    185e:	80 83       	st	Z, r24
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	a2 83       	std	Z+2, r26	; 0x02
    1864:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1866:	fe 01       	movw	r30, r28
    1868:	ff 96       	adiw	r30, 0x3f	; 63
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	82 81       	ldd	r24, Z+2	; 0x02
    1870:	93 81       	ldd	r25, Z+3	; 0x03
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e8       	ldi	r20, 0x80	; 128
    1878:	5f e3       	ldi	r21, 0x3F	; 63
    187a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    187e:	88 23       	and	r24, r24
    1880:	2c f4       	brge	.+10     	; 0x188c <LCD_sendCommand+0x40e>
		__ticks = 1;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	9e af       	std	Y+62, r25	; 0x3e
    1888:	8d af       	std	Y+61, r24	; 0x3d
    188a:	46 c0       	rjmp	.+140    	; 0x1918 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    188c:	fe 01       	movw	r30, r28
    188e:	ff 96       	adiw	r30, 0x3f	; 63
    1890:	60 81       	ld	r22, Z
    1892:	71 81       	ldd	r23, Z+1	; 0x01
    1894:	82 81       	ldd	r24, Z+2	; 0x02
    1896:	93 81       	ldd	r25, Z+3	; 0x03
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	3f ef       	ldi	r19, 0xFF	; 255
    189c:	4f e7       	ldi	r20, 0x7F	; 127
    189e:	57 e4       	ldi	r21, 0x47	; 71
    18a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18a4:	18 16       	cp	r1, r24
    18a6:	64 f5       	brge	.+88     	; 0x1900 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a8:	fe 01       	movw	r30, r28
    18aa:	ed 5b       	subi	r30, 0xBD	; 189
    18ac:	ff 4f       	sbci	r31, 0xFF	; 255
    18ae:	60 81       	ld	r22, Z
    18b0:	71 81       	ldd	r23, Z+1	; 0x01
    18b2:	82 81       	ldd	r24, Z+2	; 0x02
    18b4:	93 81       	ldd	r25, Z+3	; 0x03
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	51 e4       	ldi	r21, 0x41	; 65
    18be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	9e af       	std	Y+62, r25	; 0x3e
    18d4:	8d af       	std	Y+61, r24	; 0x3d
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <LCD_sendCommand+0x478>
    18d8:	80 e9       	ldi	r24, 0x90	; 144
    18da:	91 e0       	ldi	r25, 0x01	; 1
    18dc:	9c af       	std	Y+60, r25	; 0x3c
    18de:	8b af       	std	Y+59, r24	; 0x3b
    18e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    18e2:	9c ad       	ldd	r25, Y+60	; 0x3c
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <LCD_sendCommand+0x466>
    18e8:	9c af       	std	Y+60, r25	; 0x3c
    18ea:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    18ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	9e af       	std	Y+62, r25	; 0x3e
    18f4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    18f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	69 f7       	brne	.-38     	; 0x18d8 <LCD_sendCommand+0x45a>
    18fe:	16 c0       	rjmp	.+44     	; 0x192c <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1900:	fe 01       	movw	r30, r28
    1902:	ff 96       	adiw	r30, 0x3f	; 63
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9e af       	std	Y+62, r25	; 0x3e
    1916:	8d af       	std	Y+61, r24	; 0x3d
    1918:	8d ad       	ldd	r24, Y+61	; 0x3d
    191a:	9e ad       	ldd	r25, Y+62	; 0x3e
    191c:	9a af       	std	Y+58, r25	; 0x3a
    191e:	89 af       	std	Y+57, r24	; 0x39
    1920:	89 ad       	ldd	r24, Y+57	; 0x39
    1922:	9a ad       	ldd	r25, Y+58	; 0x3a
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <LCD_sendCommand+0x4a6>
    1928:	9a af       	std	Y+58, r25	; 0x3a
    192a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	62 e0       	ldi	r22, 0x02	; 2
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	a0 e8       	ldi	r26, 0x80	; 128
    193c:	bf e3       	ldi	r27, 0x3F	; 63
    193e:	8d ab       	std	Y+53, r24	; 0x35
    1940:	9e ab       	std	Y+54, r25	; 0x36
    1942:	af ab       	std	Y+55, r26	; 0x37
    1944:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1946:	6d a9       	ldd	r22, Y+53	; 0x35
    1948:	7e a9       	ldd	r23, Y+54	; 0x36
    194a:	8f a9       	ldd	r24, Y+55	; 0x37
    194c:	98 ad       	ldd	r25, Y+56	; 0x38
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	4a e7       	ldi	r20, 0x7A	; 122
    1954:	55 e4       	ldi	r21, 0x45	; 69
    1956:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	89 ab       	std	Y+49, r24	; 0x31
    1960:	9a ab       	std	Y+50, r25	; 0x32
    1962:	ab ab       	std	Y+51, r26	; 0x33
    1964:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1966:	69 a9       	ldd	r22, Y+49	; 0x31
    1968:	7a a9       	ldd	r23, Y+50	; 0x32
    196a:	8b a9       	ldd	r24, Y+51	; 0x33
    196c:	9c a9       	ldd	r25, Y+52	; 0x34
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e8       	ldi	r20, 0x80	; 128
    1974:	5f e3       	ldi	r21, 0x3F	; 63
    1976:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    197a:	88 23       	and	r24, r24
    197c:	2c f4       	brge	.+10     	; 0x1988 <LCD_sendCommand+0x50a>
		__ticks = 1;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	98 ab       	std	Y+48, r25	; 0x30
    1984:	8f a7       	std	Y+47, r24	; 0x2f
    1986:	3f c0       	rjmp	.+126    	; 0x1a06 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1988:	69 a9       	ldd	r22, Y+49	; 0x31
    198a:	7a a9       	ldd	r23, Y+50	; 0x32
    198c:	8b a9       	ldd	r24, Y+51	; 0x33
    198e:	9c a9       	ldd	r25, Y+52	; 0x34
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	3f ef       	ldi	r19, 0xFF	; 255
    1994:	4f e7       	ldi	r20, 0x7F	; 127
    1996:	57 e4       	ldi	r21, 0x47	; 71
    1998:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    199c:	18 16       	cp	r1, r24
    199e:	4c f5       	brge	.+82     	; 0x19f2 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a0:	6d a9       	ldd	r22, Y+53	; 0x35
    19a2:	7e a9       	ldd	r23, Y+54	; 0x36
    19a4:	8f a9       	ldd	r24, Y+55	; 0x37
    19a6:	98 ad       	ldd	r25, Y+56	; 0x38
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e2       	ldi	r20, 0x20	; 32
    19ae:	51 e4       	ldi	r21, 0x41	; 65
    19b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	bc 01       	movw	r22, r24
    19ba:	cd 01       	movw	r24, r26
    19bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	98 ab       	std	Y+48, r25	; 0x30
    19c6:	8f a7       	std	Y+47, r24	; 0x2f
    19c8:	0f c0       	rjmp	.+30     	; 0x19e8 <LCD_sendCommand+0x56a>
    19ca:	80 e9       	ldi	r24, 0x90	; 144
    19cc:	91 e0       	ldi	r25, 0x01	; 1
    19ce:	9e a7       	std	Y+46, r25	; 0x2e
    19d0:	8d a7       	std	Y+45, r24	; 0x2d
    19d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    19d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	f1 f7       	brne	.-4      	; 0x19d6 <LCD_sendCommand+0x558>
    19da:	9e a7       	std	Y+46, r25	; 0x2e
    19dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19de:	8f a5       	ldd	r24, Y+47	; 0x2f
    19e0:	98 a9       	ldd	r25, Y+48	; 0x30
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	98 ab       	std	Y+48, r25	; 0x30
    19e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ea:	98 a9       	ldd	r25, Y+48	; 0x30
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	69 f7       	brne	.-38     	; 0x19ca <LCD_sendCommand+0x54c>
    19f0:	14 c0       	rjmp	.+40     	; 0x1a1a <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f2:	69 a9       	ldd	r22, Y+49	; 0x31
    19f4:	7a a9       	ldd	r23, Y+50	; 0x32
    19f6:	8b a9       	ldd	r24, Y+51	; 0x33
    19f8:	9c a9       	ldd	r25, Y+52	; 0x34
    19fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	98 ab       	std	Y+48, r25	; 0x30
    1a04:	8f a7       	std	Y+47, r24	; 0x2f
    1a06:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a08:	98 a9       	ldd	r25, Y+48	; 0x30
    1a0a:	9c a7       	std	Y+44, r25	; 0x2c
    1a0c:	8b a7       	std	Y+43, r24	; 0x2b
    1a0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a10:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <LCD_sendCommand+0x594>
    1a16:	9c a7       	std	Y+44, r25	; 0x2c
    1a18:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	62 e0       	ldi	r22, 0x02	; 2
    1a1e:	41 e0       	ldi	r20, 0x01	; 1
    1a20:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	a0 e8       	ldi	r26, 0x80	; 128
    1a2a:	bf e3       	ldi	r27, 0x3F	; 63
    1a2c:	8f a3       	std	Y+39, r24	; 0x27
    1a2e:	98 a7       	std	Y+40, r25	; 0x28
    1a30:	a9 a7       	std	Y+41, r26	; 0x29
    1a32:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a34:	6f a1       	ldd	r22, Y+39	; 0x27
    1a36:	78 a5       	ldd	r23, Y+40	; 0x28
    1a38:	89 a5       	ldd	r24, Y+41	; 0x29
    1a3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	4a e7       	ldi	r20, 0x7A	; 122
    1a42:	55 e4       	ldi	r21, 0x45	; 69
    1a44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	8b a3       	std	Y+35, r24	; 0x23
    1a4e:	9c a3       	std	Y+36, r25	; 0x24
    1a50:	ad a3       	std	Y+37, r26	; 0x25
    1a52:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a54:	6b a1       	ldd	r22, Y+35	; 0x23
    1a56:	7c a1       	ldd	r23, Y+36	; 0x24
    1a58:	8d a1       	ldd	r24, Y+37	; 0x25
    1a5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	40 e8       	ldi	r20, 0x80	; 128
    1a62:	5f e3       	ldi	r21, 0x3F	; 63
    1a64:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a68:	88 23       	and	r24, r24
    1a6a:	2c f4       	brge	.+10     	; 0x1a76 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9a a3       	std	Y+34, r25	; 0x22
    1a72:	89 a3       	std	Y+33, r24	; 0x21
    1a74:	3f c0       	rjmp	.+126    	; 0x1af4 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1a76:	6b a1       	ldd	r22, Y+35	; 0x23
    1a78:	7c a1       	ldd	r23, Y+36	; 0x24
    1a7a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a7c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	3f ef       	ldi	r19, 0xFF	; 255
    1a82:	4f e7       	ldi	r20, 0x7F	; 127
    1a84:	57 e4       	ldi	r21, 0x47	; 71
    1a86:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a8a:	18 16       	cp	r1, r24
    1a8c:	4c f5       	brge	.+82     	; 0x1ae0 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a90:	78 a5       	ldd	r23, Y+40	; 0x28
    1a92:	89 a5       	ldd	r24, Y+41	; 0x29
    1a94:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e2       	ldi	r20, 0x20	; 32
    1a9c:	51 e4       	ldi	r21, 0x41	; 65
    1a9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	9a a3       	std	Y+34, r25	; 0x22
    1ab4:	89 a3       	std	Y+33, r24	; 0x21
    1ab6:	0f c0       	rjmp	.+30     	; 0x1ad6 <LCD_sendCommand+0x658>
    1ab8:	80 e9       	ldi	r24, 0x90	; 144
    1aba:	91 e0       	ldi	r25, 0x01	; 1
    1abc:	98 a3       	std	Y+32, r25	; 0x20
    1abe:	8f 8f       	std	Y+31, r24	; 0x1f
    1ac0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ac2:	98 a1       	ldd	r25, Y+32	; 0x20
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <LCD_sendCommand+0x646>
    1ac8:	98 a3       	std	Y+32, r25	; 0x20
    1aca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1acc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ace:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	9a a3       	std	Y+34, r25	; 0x22
    1ad4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad8:	9a a1       	ldd	r25, Y+34	; 0x22
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	69 f7       	brne	.-38     	; 0x1ab8 <LCD_sendCommand+0x63a>
    1ade:	14 c0       	rjmp	.+40     	; 0x1b08 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ae2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ae4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9a a3       	std	Y+34, r25	; 0x22
    1af2:	89 a3       	std	Y+33, r24	; 0x21
    1af4:	89 a1       	ldd	r24, Y+33	; 0x21
    1af6:	9a a1       	ldd	r25, Y+34	; 0x22
    1af8:	9e 8f       	std	Y+30, r25	; 0x1e
    1afa:	8d 8f       	std	Y+29, r24	; 0x1d
    1afc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1afe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <LCD_sendCommand+0x682>
    1b04:	9e 8f       	std	Y+30, r25	; 0x1e
    1b06:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ed 59       	subi	r30, 0x9D	; 157
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 81       	ld	r24, Z
    1b10:	98 2f       	mov	r25, r24
    1b12:	91 70       	andi	r25, 0x01	; 1
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	63 e0       	ldi	r22, 0x03	; 3
    1b18:	49 2f       	mov	r20, r25
    1b1a:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1b1e:	fe 01       	movw	r30, r28
    1b20:	ed 59       	subi	r30, 0x9D	; 157
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	88 2f       	mov	r24, r24
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	82 70       	andi	r24, 0x02	; 2
    1b2c:	90 70       	andi	r25, 0x00	; 0
    1b2e:	95 95       	asr	r25
    1b30:	87 95       	ror	r24
    1b32:	98 2f       	mov	r25, r24
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	64 e0       	ldi	r22, 0x04	; 4
    1b38:	49 2f       	mov	r20, r25
    1b3a:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1b3e:	fe 01       	movw	r30, r28
    1b40:	ed 59       	subi	r30, 0x9D	; 157
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	80 81       	ld	r24, Z
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	84 70       	andi	r24, 0x04	; 4
    1b4c:	90 70       	andi	r25, 0x00	; 0
    1b4e:	95 95       	asr	r25
    1b50:	87 95       	ror	r24
    1b52:	95 95       	asr	r25
    1b54:	87 95       	ror	r24
    1b56:	98 2f       	mov	r25, r24
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	65 e0       	ldi	r22, 0x05	; 5
    1b5c:	49 2f       	mov	r20, r25
    1b5e:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1b62:	fe 01       	movw	r30, r28
    1b64:	ed 59       	subi	r30, 0x9D	; 157
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	80 81       	ld	r24, Z
    1b6a:	88 2f       	mov	r24, r24
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	88 70       	andi	r24, 0x08	; 8
    1b70:	90 70       	andi	r25, 0x00	; 0
    1b72:	95 95       	asr	r25
    1b74:	87 95       	ror	r24
    1b76:	95 95       	asr	r25
    1b78:	87 95       	ror	r24
    1b7a:	95 95       	asr	r25
    1b7c:	87 95       	ror	r24
    1b7e:	98 2f       	mov	r25, r24
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	66 e0       	ldi	r22, 0x06	; 6
    1b84:	49 2f       	mov	r20, r25
    1b86:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	a0 e8       	ldi	r26, 0x80	; 128
    1b90:	bf e3       	ldi	r27, 0x3F	; 63
    1b92:	89 8f       	std	Y+25, r24	; 0x19
    1b94:	9a 8f       	std	Y+26, r25	; 0x1a
    1b96:	ab 8f       	std	Y+27, r26	; 0x1b
    1b98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	4a e7       	ldi	r20, 0x7A	; 122
    1ba8:	55 e4       	ldi	r21, 0x45	; 69
    1baa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	8d 8b       	std	Y+21, r24	; 0x15
    1bb4:	9e 8b       	std	Y+22, r25	; 0x16
    1bb6:	af 8b       	std	Y+23, r26	; 0x17
    1bb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bba:	6d 89       	ldd	r22, Y+21	; 0x15
    1bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e8       	ldi	r20, 0x80	; 128
    1bc8:	5f e3       	ldi	r21, 0x3F	; 63
    1bca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bce:	88 23       	and	r24, r24
    1bd0:	2c f4       	brge	.+10     	; 0x1bdc <LCD_sendCommand+0x75e>
		__ticks = 1;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9c 8b       	std	Y+20, r25	; 0x14
    1bd8:	8b 8b       	std	Y+19, r24	; 0x13
    1bda:	3f c0       	rjmp	.+126    	; 0x1c5a <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bde:	7e 89       	ldd	r23, Y+22	; 0x16
    1be0:	8f 89       	ldd	r24, Y+23	; 0x17
    1be2:	98 8d       	ldd	r25, Y+24	; 0x18
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	3f ef       	ldi	r19, 0xFF	; 255
    1be8:	4f e7       	ldi	r20, 0x7F	; 127
    1bea:	57 e4       	ldi	r21, 0x47	; 71
    1bec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bf0:	18 16       	cp	r1, r24
    1bf2:	4c f5       	brge	.+82     	; 0x1c46 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf4:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e2       	ldi	r20, 0x20	; 32
    1c02:	51 e4       	ldi	r21, 0x41	; 65
    1c04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9c 8b       	std	Y+20, r25	; 0x14
    1c1a:	8b 8b       	std	Y+19, r24	; 0x13
    1c1c:	0f c0       	rjmp	.+30     	; 0x1c3c <LCD_sendCommand+0x7be>
    1c1e:	80 e9       	ldi	r24, 0x90	; 144
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	9a 8b       	std	Y+18, r25	; 0x12
    1c24:	89 8b       	std	Y+17, r24	; 0x11
    1c26:	89 89       	ldd	r24, Y+17	; 0x11
    1c28:	9a 89       	ldd	r25, Y+18	; 0x12
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_sendCommand+0x7ac>
    1c2e:	9a 8b       	std	Y+18, r25	; 0x12
    1c30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c32:	8b 89       	ldd	r24, Y+19	; 0x13
    1c34:	9c 89       	ldd	r25, Y+20	; 0x14
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	9c 8b       	std	Y+20, r25	; 0x14
    1c3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	69 f7       	brne	.-38     	; 0x1c1e <LCD_sendCommand+0x7a0>
    1c44:	14 c0       	rjmp	.+40     	; 0x1c6e <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c46:	6d 89       	ldd	r22, Y+21	; 0x15
    1c48:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9c 8b       	std	Y+20, r25	; 0x14
    1c58:	8b 8b       	std	Y+19, r24	; 0x13
    1c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5e:	98 8b       	std	Y+16, r25	; 0x10
    1c60:	8f 87       	std	Y+15, r24	; 0x0f
    1c62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c64:	98 89       	ldd	r25, Y+16	; 0x10
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <LCD_sendCommand+0x7e8>
    1c6a:	98 8b       	std	Y+16, r25	; 0x10
    1c6c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	62 e0       	ldi	r22, 0x02	; 2
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a0 e8       	ldi	r26, 0x80	; 128
    1c7e:	bf e3       	ldi	r27, 0x3F	; 63
    1c80:	8b 87       	std	Y+11, r24	; 0x0b
    1c82:	9c 87       	std	Y+12, r25	; 0x0c
    1c84:	ad 87       	std	Y+13, r26	; 0x0d
    1c86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	4a e7       	ldi	r20, 0x7A	; 122
    1c96:	55 e4       	ldi	r21, 0x45	; 69
    1c98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	8f 83       	std	Y+7, r24	; 0x07
    1ca2:	98 87       	std	Y+8, r25	; 0x08
    1ca4:	a9 87       	std	Y+9, r26	; 0x09
    1ca6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    1caa:	78 85       	ldd	r23, Y+8	; 0x08
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e8       	ldi	r20, 0x80	; 128
    1cb6:	5f e3       	ldi	r21, 0x3F	; 63
    1cb8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cbc:	88 23       	and	r24, r24
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <LCD_sendCommand+0x84c>
		__ticks = 1;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
    1cc8:	3f c0       	rjmp	.+126    	; 0x1d48 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1cca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ccc:	78 85       	ldd	r23, Y+8	; 0x08
    1cce:	89 85       	ldd	r24, Y+9	; 0x09
    1cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	3f ef       	ldi	r19, 0xFF	; 255
    1cd6:	4f e7       	ldi	r20, 0x7F	; 127
    1cd8:	57 e4       	ldi	r21, 0x47	; 71
    1cda:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cde:	18 16       	cp	r1, r24
    1ce0:	4c f5       	brge	.+82     	; 0x1d34 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e2       	ldi	r20, 0x20	; 32
    1cf0:	51 e4       	ldi	r21, 0x41	; 65
    1cf2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <LCD_sendCommand+0x8ac>
    1d0c:	80 e9       	ldi	r24, 0x90	; 144
    1d0e:	91 e0       	ldi	r25, 0x01	; 1
    1d10:	9c 83       	std	Y+4, r25	; 0x04
    1d12:	8b 83       	std	Y+3, r24	; 0x03
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <LCD_sendCommand+0x89a>
    1d1c:	9c 83       	std	Y+4, r25	; 0x04
    1d1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	9e 83       	std	Y+6, r25	; 0x06
    1d28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	69 f7       	brne	.-38     	; 0x1d0c <LCD_sendCommand+0x88e>
    1d32:	14 c0       	rjmp	.+40     	; 0x1d5c <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d34:	6f 81       	ldd	r22, Y+7	; 0x07
    1d36:	78 85       	ldd	r23, Y+8	; 0x08
    1d38:	89 85       	ldd	r24, Y+9	; 0x09
    1d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_sendCommand+0x8d6>
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1d5c:	cd 59       	subi	r28, 0x9D	; 157
    1d5e:	df 4f       	sbci	r29, 0xFF	; 255
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	1f 91       	pop	r17
    1d70:	0f 91       	pop	r16
    1d72:	08 95       	ret

00001d74 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	c3 56       	subi	r28, 0x63	; 99
    1d82:	d0 40       	sbci	r29, 0x00	; 0
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
    1d8e:	fe 01       	movw	r30, r28
    1d90:	ed 59       	subi	r30, 0x9D	; 157
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	61 e0       	ldi	r22, 0x01	; 1
    1d9a:	41 e0       	ldi	r20, 0x01	; 1
    1d9c:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    1da0:	fe 01       	movw	r30, r28
    1da2:	e1 5a       	subi	r30, 0xA1	; 161
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	a0 e8       	ldi	r26, 0x80	; 128
    1dac:	bf e3       	ldi	r27, 0x3F	; 63
    1dae:	80 83       	st	Z, r24
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	a2 83       	std	Z+2, r26	; 0x02
    1db4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db6:	8e 01       	movw	r16, r28
    1db8:	05 5a       	subi	r16, 0xA5	; 165
    1dba:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e1 5a       	subi	r30, 0xA1	; 161
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	60 81       	ld	r22, Z
    1dc4:	71 81       	ldd	r23, Z+1	; 0x01
    1dc6:	82 81       	ldd	r24, Z+2	; 0x02
    1dc8:	93 81       	ldd	r25, Z+3	; 0x03
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	4a e7       	ldi	r20, 0x7A	; 122
    1dd0:	55 e4       	ldi	r21, 0x45	; 69
    1dd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	f8 01       	movw	r30, r16
    1ddc:	80 83       	st	Z, r24
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	a2 83       	std	Z+2, r26	; 0x02
    1de2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1de4:	fe 01       	movw	r30, r28
    1de6:	e5 5a       	subi	r30, 0xA5	; 165
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	60 81       	ld	r22, Z
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	44 f4       	brge	.+16     	; 0x1e12 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    1e02:	fe 01       	movw	r30, r28
    1e04:	e7 5a       	subi	r30, 0xA7	; 167
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	91 83       	std	Z+1, r25	; 0x01
    1e0e:	80 83       	st	Z, r24
    1e10:	64 c0       	rjmp	.+200    	; 0x1eda <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    1e12:	fe 01       	movw	r30, r28
    1e14:	e5 5a       	subi	r30, 0xA5	; 165
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	60 81       	ld	r22, Z
    1e1a:	71 81       	ldd	r23, Z+1	; 0x01
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	4f e7       	ldi	r20, 0x7F	; 127
    1e26:	57 e4       	ldi	r21, 0x47	; 71
    1e28:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	0c f0       	brlt	.+2      	; 0x1e32 <LCD_displayCharacter+0xbe>
    1e30:	43 c0       	rjmp	.+134    	; 0x1eb8 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e32:	fe 01       	movw	r30, r28
    1e34:	e1 5a       	subi	r30, 0xA1	; 161
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e2       	ldi	r20, 0x20	; 32
    1e46:	51 e4       	ldi	r21, 0x41	; 65
    1e48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	8e 01       	movw	r16, r28
    1e52:	07 5a       	subi	r16, 0xA7	; 167
    1e54:	1f 4f       	sbci	r17, 0xFF	; 255
    1e56:	bc 01       	movw	r22, r24
    1e58:	cd 01       	movw	r24, r26
    1e5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	f8 01       	movw	r30, r16
    1e64:	91 83       	std	Z+1, r25	; 0x01
    1e66:	80 83       	st	Z, r24
    1e68:	1f c0       	rjmp	.+62     	; 0x1ea8 <LCD_displayCharacter+0x134>
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e9 5a       	subi	r30, 0xA9	; 169
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	80 e9       	ldi	r24, 0x90	; 144
    1e72:	91 e0       	ldi	r25, 0x01	; 1
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	80 83       	st	Z, r24
    1e78:	fe 01       	movw	r30, r28
    1e7a:	e9 5a       	subi	r30, 0xA9	; 169
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	80 81       	ld	r24, Z
    1e80:	91 81       	ldd	r25, Z+1	; 0x01
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	f1 f7       	brne	.-4      	; 0x1e82 <LCD_displayCharacter+0x10e>
    1e86:	fe 01       	movw	r30, r28
    1e88:	e9 5a       	subi	r30, 0xA9	; 169
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e90:	de 01       	movw	r26, r28
    1e92:	a7 5a       	subi	r26, 0xA7	; 167
    1e94:	bf 4f       	sbci	r27, 0xFF	; 255
    1e96:	fe 01       	movw	r30, r28
    1e98:	e7 5a       	subi	r30, 0xA7	; 167
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	80 81       	ld	r24, Z
    1e9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	11 96       	adiw	r26, 0x01	; 1
    1ea4:	9c 93       	st	X, r25
    1ea6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e7 5a       	subi	r30, 0xA7	; 167
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	80 81       	ld	r24, Z
    1eb0:	91 81       	ldd	r25, Z+1	; 0x01
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	d1 f6       	brne	.-76     	; 0x1e6a <LCD_displayCharacter+0xf6>
    1eb6:	27 c0       	rjmp	.+78     	; 0x1f06 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb8:	8e 01       	movw	r16, r28
    1eba:	07 5a       	subi	r16, 0xA7	; 167
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e5 5a       	subi	r30, 0xA5	; 165
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	60 81       	ld	r22, Z
    1ec6:	71 81       	ldd	r23, Z+1	; 0x01
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	93 81       	ldd	r25, Z+3	; 0x03
    1ecc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	80 83       	st	Z, r24
    1eda:	de 01       	movw	r26, r28
    1edc:	ab 5a       	subi	r26, 0xAB	; 171
    1ede:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e7 5a       	subi	r30, 0xA7	; 167
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	80 81       	ld	r24, Z
    1ee8:	91 81       	ldd	r25, Z+1	; 0x01
    1eea:	8d 93       	st	X+, r24
    1eec:	9c 93       	st	X, r25
    1eee:	fe 01       	movw	r30, r28
    1ef0:	eb 5a       	subi	r30, 0xAB	; 171
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <LCD_displayCharacter+0x184>
    1efc:	fe 01       	movw	r30, r28
    1efe:	eb 5a       	subi	r30, 0xAB	; 171
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	91 83       	std	Z+1, r25	; 0x01
    1f04:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	62 e0       	ldi	r22, 0x02	; 2
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    1f10:	fe 01       	movw	r30, r28
    1f12:	ef 5a       	subi	r30, 0xAF	; 175
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	a0 e8       	ldi	r26, 0x80	; 128
    1f1c:	bf e3       	ldi	r27, 0x3F	; 63
    1f1e:	80 83       	st	Z, r24
    1f20:	91 83       	std	Z+1, r25	; 0x01
    1f22:	a2 83       	std	Z+2, r26	; 0x02
    1f24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f26:	8e 01       	movw	r16, r28
    1f28:	03 5b       	subi	r16, 0xB3	; 179
    1f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	ef 5a       	subi	r30, 0xAF	; 175
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	60 81       	ld	r22, Z
    1f34:	71 81       	ldd	r23, Z+1	; 0x01
    1f36:	82 81       	ldd	r24, Z+2	; 0x02
    1f38:	93 81       	ldd	r25, Z+3	; 0x03
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	4a e7       	ldi	r20, 0x7A	; 122
    1f40:	55 e4       	ldi	r21, 0x45	; 69
    1f42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	f8 01       	movw	r30, r16
    1f4c:	80 83       	st	Z, r24
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	a2 83       	std	Z+2, r26	; 0x02
    1f52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f54:	fe 01       	movw	r30, r28
    1f56:	e3 5b       	subi	r30, 0xB3	; 179
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	60 81       	ld	r22, Z
    1f5c:	71 81       	ldd	r23, Z+1	; 0x01
    1f5e:	82 81       	ldd	r24, Z+2	; 0x02
    1f60:	93 81       	ldd	r25, Z+3	; 0x03
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e8       	ldi	r20, 0x80	; 128
    1f68:	5f e3       	ldi	r21, 0x3F	; 63
    1f6a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f6e:	88 23       	and	r24, r24
    1f70:	44 f4       	brge	.+16     	; 0x1f82 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    1f72:	fe 01       	movw	r30, r28
    1f74:	e5 5b       	subi	r30, 0xB5	; 181
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	80 83       	st	Z, r24
    1f80:	64 c0       	rjmp	.+200    	; 0x204a <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    1f82:	fe 01       	movw	r30, r28
    1f84:	e3 5b       	subi	r30, 0xB3	; 179
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	3f ef       	ldi	r19, 0xFF	; 255
    1f94:	4f e7       	ldi	r20, 0x7F	; 127
    1f96:	57 e4       	ldi	r21, 0x47	; 71
    1f98:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f9c:	18 16       	cp	r1, r24
    1f9e:	0c f0       	brlt	.+2      	; 0x1fa2 <LCD_displayCharacter+0x22e>
    1fa0:	43 c0       	rjmp	.+134    	; 0x2028 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	ef 5a       	subi	r30, 0xAF	; 175
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	60 81       	ld	r22, Z
    1faa:	71 81       	ldd	r23, Z+1	; 0x01
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e2       	ldi	r20, 0x20	; 32
    1fb6:	51 e4       	ldi	r21, 0x41	; 65
    1fb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	8e 01       	movw	r16, r28
    1fc2:	05 5b       	subi	r16, 0xB5	; 181
    1fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc6:	bc 01       	movw	r22, r24
    1fc8:	cd 01       	movw	r24, r26
    1fca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	f8 01       	movw	r30, r16
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	80 83       	st	Z, r24
    1fd8:	1f c0       	rjmp	.+62     	; 0x2018 <LCD_displayCharacter+0x2a4>
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e7 5b       	subi	r30, 0xB7	; 183
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	80 e9       	ldi	r24, 0x90	; 144
    1fe2:	91 e0       	ldi	r25, 0x01	; 1
    1fe4:	91 83       	std	Z+1, r25	; 0x01
    1fe6:	80 83       	st	Z, r24
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e7 5b       	subi	r30, 0xB7	; 183
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	80 81       	ld	r24, Z
    1ff0:	91 81       	ldd	r25, Z+1	; 0x01
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <LCD_displayCharacter+0x27e>
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e7 5b       	subi	r30, 0xB7	; 183
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	91 83       	std	Z+1, r25	; 0x01
    1ffe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2000:	de 01       	movw	r26, r28
    2002:	a5 5b       	subi	r26, 0xB5	; 181
    2004:	bf 4f       	sbci	r27, 0xFF	; 255
    2006:	fe 01       	movw	r30, r28
    2008:	e5 5b       	subi	r30, 0xB5	; 181
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 81       	ld	r24, Z
    200e:	91 81       	ldd	r25, Z+1	; 0x01
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	11 96       	adiw	r26, 0x01	; 1
    2014:	9c 93       	st	X, r25
    2016:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2018:	fe 01       	movw	r30, r28
    201a:	e5 5b       	subi	r30, 0xB5	; 181
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 81       	ld	r24, Z
    2020:	91 81       	ldd	r25, Z+1	; 0x01
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	d1 f6       	brne	.-76     	; 0x1fda <LCD_displayCharacter+0x266>
    2026:	27 c0       	rjmp	.+78     	; 0x2076 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2028:	8e 01       	movw	r16, r28
    202a:	05 5b       	subi	r16, 0xB5	; 181
    202c:	1f 4f       	sbci	r17, 0xFF	; 255
    202e:	fe 01       	movw	r30, r28
    2030:	e3 5b       	subi	r30, 0xB3	; 179
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	60 81       	ld	r22, Z
    2036:	71 81       	ldd	r23, Z+1	; 0x01
    2038:	82 81       	ldd	r24, Z+2	; 0x02
    203a:	93 81       	ldd	r25, Z+3	; 0x03
    203c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	f8 01       	movw	r30, r16
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	80 83       	st	Z, r24
    204a:	de 01       	movw	r26, r28
    204c:	a9 5b       	subi	r26, 0xB9	; 185
    204e:	bf 4f       	sbci	r27, 0xFF	; 255
    2050:	fe 01       	movw	r30, r28
    2052:	e5 5b       	subi	r30, 0xB5	; 181
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 81       	ld	r24, Z
    2058:	91 81       	ldd	r25, Z+1	; 0x01
    205a:	8d 93       	st	X+, r24
    205c:	9c 93       	st	X, r25
    205e:	fe 01       	movw	r30, r28
    2060:	e9 5b       	subi	r30, 0xB9	; 185
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 81       	ld	r24, Z
    2066:	91 81       	ldd	r25, Z+1	; 0x01
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <LCD_displayCharacter+0x2f4>
    206c:	fe 01       	movw	r30, r28
    206e:	e9 5b       	subi	r30, 0xB9	; 185
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2076:	fe 01       	movw	r30, r28
    2078:	ed 59       	subi	r30, 0x9D	; 157
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	80 81       	ld	r24, Z
    207e:	88 2f       	mov	r24, r24
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	80 71       	andi	r24, 0x10	; 16
    2084:	90 70       	andi	r25, 0x00	; 0
    2086:	95 95       	asr	r25
    2088:	87 95       	ror	r24
    208a:	95 95       	asr	r25
    208c:	87 95       	ror	r24
    208e:	95 95       	asr	r25
    2090:	87 95       	ror	r24
    2092:	95 95       	asr	r25
    2094:	87 95       	ror	r24
    2096:	98 2f       	mov	r25, r24
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	63 e0       	ldi	r22, 0x03	; 3
    209c:	49 2f       	mov	r20, r25
    209e:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    20a2:	fe 01       	movw	r30, r28
    20a4:	ed 59       	subi	r30, 0x9D	; 157
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	80 81       	ld	r24, Z
    20aa:	88 2f       	mov	r24, r24
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	80 72       	andi	r24, 0x20	; 32
    20b0:	90 70       	andi	r25, 0x00	; 0
    20b2:	95 95       	asr	r25
    20b4:	87 95       	ror	r24
    20b6:	95 95       	asr	r25
    20b8:	87 95       	ror	r24
    20ba:	95 95       	asr	r25
    20bc:	87 95       	ror	r24
    20be:	95 95       	asr	r25
    20c0:	87 95       	ror	r24
    20c2:	95 95       	asr	r25
    20c4:	87 95       	ror	r24
    20c6:	98 2f       	mov	r25, r24
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	64 e0       	ldi	r22, 0x04	; 4
    20cc:	49 2f       	mov	r20, r25
    20ce:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    20d2:	fe 01       	movw	r30, r28
    20d4:	ed 59       	subi	r30, 0x9D	; 157
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	80 81       	ld	r24, Z
    20da:	88 2f       	mov	r24, r24
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	80 74       	andi	r24, 0x40	; 64
    20e0:	90 70       	andi	r25, 0x00	; 0
    20e2:	08 2e       	mov	r0, r24
    20e4:	89 2f       	mov	r24, r25
    20e6:	00 0c       	add	r0, r0
    20e8:	88 1f       	adc	r24, r24
    20ea:	99 0b       	sbc	r25, r25
    20ec:	00 0c       	add	r0, r0
    20ee:	88 1f       	adc	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	98 2f       	mov	r25, r24
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	65 e0       	ldi	r22, 0x05	; 5
    20f8:	49 2f       	mov	r20, r25
    20fa:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    20fe:	fe 01       	movw	r30, r28
    2100:	ed 59       	subi	r30, 0x9D	; 157
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	80 81       	ld	r24, Z
    2106:	98 2f       	mov	r25, r24
    2108:	99 1f       	adc	r25, r25
    210a:	99 27       	eor	r25, r25
    210c:	99 1f       	adc	r25, r25
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	66 e0       	ldi	r22, 0x06	; 6
    2112:	49 2f       	mov	r20, r25
    2114:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    2118:	fe 01       	movw	r30, r28
    211a:	ed 5b       	subi	r30, 0xBD	; 189
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	a0 e8       	ldi	r26, 0x80	; 128
    2124:	bf e3       	ldi	r27, 0x3F	; 63
    2126:	80 83       	st	Z, r24
    2128:	91 83       	std	Z+1, r25	; 0x01
    212a:	a2 83       	std	Z+2, r26	; 0x02
    212c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    212e:	8e 01       	movw	r16, r28
    2130:	01 5c       	subi	r16, 0xC1	; 193
    2132:	1f 4f       	sbci	r17, 0xFF	; 255
    2134:	fe 01       	movw	r30, r28
    2136:	ed 5b       	subi	r30, 0xBD	; 189
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	60 81       	ld	r22, Z
    213c:	71 81       	ldd	r23, Z+1	; 0x01
    213e:	82 81       	ldd	r24, Z+2	; 0x02
    2140:	93 81       	ldd	r25, Z+3	; 0x03
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a e7       	ldi	r20, 0x7A	; 122
    2148:	55 e4       	ldi	r21, 0x45	; 69
    214a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	f8 01       	movw	r30, r16
    2154:	80 83       	st	Z, r24
    2156:	91 83       	std	Z+1, r25	; 0x01
    2158:	a2 83       	std	Z+2, r26	; 0x02
    215a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    215c:	fe 01       	movw	r30, r28
    215e:	ff 96       	adiw	r30, 0x3f	; 63
    2160:	60 81       	ld	r22, Z
    2162:	71 81       	ldd	r23, Z+1	; 0x01
    2164:	82 81       	ldd	r24, Z+2	; 0x02
    2166:	93 81       	ldd	r25, Z+3	; 0x03
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e8       	ldi	r20, 0x80	; 128
    216e:	5f e3       	ldi	r21, 0x3F	; 63
    2170:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2174:	88 23       	and	r24, r24
    2176:	2c f4       	brge	.+10     	; 0x2182 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	9e af       	std	Y+62, r25	; 0x3e
    217e:	8d af       	std	Y+61, r24	; 0x3d
    2180:	46 c0       	rjmp	.+140    	; 0x220e <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2182:	fe 01       	movw	r30, r28
    2184:	ff 96       	adiw	r30, 0x3f	; 63
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	3f ef       	ldi	r19, 0xFF	; 255
    2192:	4f e7       	ldi	r20, 0x7F	; 127
    2194:	57 e4       	ldi	r21, 0x47	; 71
    2196:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    219a:	18 16       	cp	r1, r24
    219c:	64 f5       	brge	.+88     	; 0x21f6 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219e:	fe 01       	movw	r30, r28
    21a0:	ed 5b       	subi	r30, 0xBD	; 189
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	60 81       	ld	r22, Z
    21a6:	71 81       	ldd	r23, Z+1	; 0x01
    21a8:	82 81       	ldd	r24, Z+2	; 0x02
    21aa:	93 81       	ldd	r25, Z+3	; 0x03
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e2       	ldi	r20, 0x20	; 32
    21b2:	51 e4       	ldi	r21, 0x41	; 65
    21b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	bc 01       	movw	r22, r24
    21be:	cd 01       	movw	r24, r26
    21c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	9e af       	std	Y+62, r25	; 0x3e
    21ca:	8d af       	std	Y+61, r24	; 0x3d
    21cc:	0f c0       	rjmp	.+30     	; 0x21ec <LCD_displayCharacter+0x478>
    21ce:	80 e9       	ldi	r24, 0x90	; 144
    21d0:	91 e0       	ldi	r25, 0x01	; 1
    21d2:	9c af       	std	Y+60, r25	; 0x3c
    21d4:	8b af       	std	Y+59, r24	; 0x3b
    21d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    21d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <LCD_displayCharacter+0x466>
    21de:	9c af       	std	Y+60, r25	; 0x3c
    21e0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    21e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	9e af       	std	Y+62, r25	; 0x3e
    21ea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    21ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	69 f7       	brne	.-38     	; 0x21ce <LCD_displayCharacter+0x45a>
    21f4:	16 c0       	rjmp	.+44     	; 0x2222 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f6:	fe 01       	movw	r30, r28
    21f8:	ff 96       	adiw	r30, 0x3f	; 63
    21fa:	60 81       	ld	r22, Z
    21fc:	71 81       	ldd	r23, Z+1	; 0x01
    21fe:	82 81       	ldd	r24, Z+2	; 0x02
    2200:	93 81       	ldd	r25, Z+3	; 0x03
    2202:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	9e af       	std	Y+62, r25	; 0x3e
    220c:	8d af       	std	Y+61, r24	; 0x3d
    220e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2210:	9e ad       	ldd	r25, Y+62	; 0x3e
    2212:	9a af       	std	Y+58, r25	; 0x3a
    2214:	89 af       	std	Y+57, r24	; 0x39
    2216:	89 ad       	ldd	r24, Y+57	; 0x39
    2218:	9a ad       	ldd	r25, Y+58	; 0x3a
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_displayCharacter+0x4a6>
    221e:	9a af       	std	Y+58, r25	; 0x3a
    2220:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	62 e0       	ldi	r22, 0x02	; 2
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	a0 e8       	ldi	r26, 0x80	; 128
    2232:	bf e3       	ldi	r27, 0x3F	; 63
    2234:	8d ab       	std	Y+53, r24	; 0x35
    2236:	9e ab       	std	Y+54, r25	; 0x36
    2238:	af ab       	std	Y+55, r26	; 0x37
    223a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223c:	6d a9       	ldd	r22, Y+53	; 0x35
    223e:	7e a9       	ldd	r23, Y+54	; 0x36
    2240:	8f a9       	ldd	r24, Y+55	; 0x37
    2242:	98 ad       	ldd	r25, Y+56	; 0x38
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	4a e7       	ldi	r20, 0x7A	; 122
    224a:	55 e4       	ldi	r21, 0x45	; 69
    224c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	89 ab       	std	Y+49, r24	; 0x31
    2256:	9a ab       	std	Y+50, r25	; 0x32
    2258:	ab ab       	std	Y+51, r26	; 0x33
    225a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    225c:	69 a9       	ldd	r22, Y+49	; 0x31
    225e:	7a a9       	ldd	r23, Y+50	; 0x32
    2260:	8b a9       	ldd	r24, Y+51	; 0x33
    2262:	9c a9       	ldd	r25, Y+52	; 0x34
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e8       	ldi	r20, 0x80	; 128
    226a:	5f e3       	ldi	r21, 0x3F	; 63
    226c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2270:	88 23       	and	r24, r24
    2272:	2c f4       	brge	.+10     	; 0x227e <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	98 ab       	std	Y+48, r25	; 0x30
    227a:	8f a7       	std	Y+47, r24	; 0x2f
    227c:	3f c0       	rjmp	.+126    	; 0x22fc <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    227e:	69 a9       	ldd	r22, Y+49	; 0x31
    2280:	7a a9       	ldd	r23, Y+50	; 0x32
    2282:	8b a9       	ldd	r24, Y+51	; 0x33
    2284:	9c a9       	ldd	r25, Y+52	; 0x34
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	3f ef       	ldi	r19, 0xFF	; 255
    228a:	4f e7       	ldi	r20, 0x7F	; 127
    228c:	57 e4       	ldi	r21, 0x47	; 71
    228e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2292:	18 16       	cp	r1, r24
    2294:	4c f5       	brge	.+82     	; 0x22e8 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2296:	6d a9       	ldd	r22, Y+53	; 0x35
    2298:	7e a9       	ldd	r23, Y+54	; 0x36
    229a:	8f a9       	ldd	r24, Y+55	; 0x37
    229c:	98 ad       	ldd	r25, Y+56	; 0x38
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e2       	ldi	r20, 0x20	; 32
    22a4:	51 e4       	ldi	r21, 0x41	; 65
    22a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	98 ab       	std	Y+48, r25	; 0x30
    22bc:	8f a7       	std	Y+47, r24	; 0x2f
    22be:	0f c0       	rjmp	.+30     	; 0x22de <LCD_displayCharacter+0x56a>
    22c0:	80 e9       	ldi	r24, 0x90	; 144
    22c2:	91 e0       	ldi	r25, 0x01	; 1
    22c4:	9e a7       	std	Y+46, r25	; 0x2e
    22c6:	8d a7       	std	Y+45, r24	; 0x2d
    22c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    22ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <LCD_displayCharacter+0x558>
    22d0:	9e a7       	std	Y+46, r25	; 0x2e
    22d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22d6:	98 a9       	ldd	r25, Y+48	; 0x30
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	98 ab       	std	Y+48, r25	; 0x30
    22dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22de:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e0:	98 a9       	ldd	r25, Y+48	; 0x30
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	69 f7       	brne	.-38     	; 0x22c0 <LCD_displayCharacter+0x54c>
    22e6:	14 c0       	rjmp	.+40     	; 0x2310 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e8:	69 a9       	ldd	r22, Y+49	; 0x31
    22ea:	7a a9       	ldd	r23, Y+50	; 0x32
    22ec:	8b a9       	ldd	r24, Y+51	; 0x33
    22ee:	9c a9       	ldd	r25, Y+52	; 0x34
    22f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	98 ab       	std	Y+48, r25	; 0x30
    22fa:	8f a7       	std	Y+47, r24	; 0x2f
    22fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    22fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2300:	9c a7       	std	Y+44, r25	; 0x2c
    2302:	8b a7       	std	Y+43, r24	; 0x2b
    2304:	8b a5       	ldd	r24, Y+43	; 0x2b
    2306:	9c a5       	ldd	r25, Y+44	; 0x2c
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <LCD_displayCharacter+0x594>
    230c:	9c a7       	std	Y+44, r25	; 0x2c
    230e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	62 e0       	ldi	r22, 0x02	; 2
    2314:	41 e0       	ldi	r20, 0x01	; 1
    2316:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	a0 e8       	ldi	r26, 0x80	; 128
    2320:	bf e3       	ldi	r27, 0x3F	; 63
    2322:	8f a3       	std	Y+39, r24	; 0x27
    2324:	98 a7       	std	Y+40, r25	; 0x28
    2326:	a9 a7       	std	Y+41, r26	; 0x29
    2328:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232a:	6f a1       	ldd	r22, Y+39	; 0x27
    232c:	78 a5       	ldd	r23, Y+40	; 0x28
    232e:	89 a5       	ldd	r24, Y+41	; 0x29
    2330:	9a a5       	ldd	r25, Y+42	; 0x2a
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	4a e7       	ldi	r20, 0x7A	; 122
    2338:	55 e4       	ldi	r21, 0x45	; 69
    233a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	8b a3       	std	Y+35, r24	; 0x23
    2344:	9c a3       	std	Y+36, r25	; 0x24
    2346:	ad a3       	std	Y+37, r26	; 0x25
    2348:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    234a:	6b a1       	ldd	r22, Y+35	; 0x23
    234c:	7c a1       	ldd	r23, Y+36	; 0x24
    234e:	8d a1       	ldd	r24, Y+37	; 0x25
    2350:	9e a1       	ldd	r25, Y+38	; 0x26
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e8       	ldi	r20, 0x80	; 128
    2358:	5f e3       	ldi	r21, 0x3F	; 63
    235a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    235e:	88 23       	and	r24, r24
    2360:	2c f4       	brge	.+10     	; 0x236c <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	9a a3       	std	Y+34, r25	; 0x22
    2368:	89 a3       	std	Y+33, r24	; 0x21
    236a:	3f c0       	rjmp	.+126    	; 0x23ea <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    236c:	6b a1       	ldd	r22, Y+35	; 0x23
    236e:	7c a1       	ldd	r23, Y+36	; 0x24
    2370:	8d a1       	ldd	r24, Y+37	; 0x25
    2372:	9e a1       	ldd	r25, Y+38	; 0x26
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	3f ef       	ldi	r19, 0xFF	; 255
    2378:	4f e7       	ldi	r20, 0x7F	; 127
    237a:	57 e4       	ldi	r21, 0x47	; 71
    237c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2380:	18 16       	cp	r1, r24
    2382:	4c f5       	brge	.+82     	; 0x23d6 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2384:	6f a1       	ldd	r22, Y+39	; 0x27
    2386:	78 a5       	ldd	r23, Y+40	; 0x28
    2388:	89 a5       	ldd	r24, Y+41	; 0x29
    238a:	9a a5       	ldd	r25, Y+42	; 0x2a
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e2       	ldi	r20, 0x20	; 32
    2392:	51 e4       	ldi	r21, 0x41	; 65
    2394:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	bc 01       	movw	r22, r24
    239e:	cd 01       	movw	r24, r26
    23a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	9a a3       	std	Y+34, r25	; 0x22
    23aa:	89 a3       	std	Y+33, r24	; 0x21
    23ac:	0f c0       	rjmp	.+30     	; 0x23cc <LCD_displayCharacter+0x658>
    23ae:	80 e9       	ldi	r24, 0x90	; 144
    23b0:	91 e0       	ldi	r25, 0x01	; 1
    23b2:	98 a3       	std	Y+32, r25	; 0x20
    23b4:	8f 8f       	std	Y+31, r24	; 0x1f
    23b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23b8:	98 a1       	ldd	r25, Y+32	; 0x20
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	f1 f7       	brne	.-4      	; 0x23ba <LCD_displayCharacter+0x646>
    23be:	98 a3       	std	Y+32, r25	; 0x20
    23c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c2:	89 a1       	ldd	r24, Y+33	; 0x21
    23c4:	9a a1       	ldd	r25, Y+34	; 0x22
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	9a a3       	std	Y+34, r25	; 0x22
    23ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23cc:	89 a1       	ldd	r24, Y+33	; 0x21
    23ce:	9a a1       	ldd	r25, Y+34	; 0x22
    23d0:	00 97       	sbiw	r24, 0x00	; 0
    23d2:	69 f7       	brne	.-38     	; 0x23ae <LCD_displayCharacter+0x63a>
    23d4:	14 c0       	rjmp	.+40     	; 0x23fe <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d6:	6b a1       	ldd	r22, Y+35	; 0x23
    23d8:	7c a1       	ldd	r23, Y+36	; 0x24
    23da:	8d a1       	ldd	r24, Y+37	; 0x25
    23dc:	9e a1       	ldd	r25, Y+38	; 0x26
    23de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	9a a3       	std	Y+34, r25	; 0x22
    23e8:	89 a3       	std	Y+33, r24	; 0x21
    23ea:	89 a1       	ldd	r24, Y+33	; 0x21
    23ec:	9a a1       	ldd	r25, Y+34	; 0x22
    23ee:	9e 8f       	std	Y+30, r25	; 0x1e
    23f0:	8d 8f       	std	Y+29, r24	; 0x1d
    23f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	f1 f7       	brne	.-4      	; 0x23f6 <LCD_displayCharacter+0x682>
    23fa:	9e 8f       	std	Y+30, r25	; 0x1e
    23fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    23fe:	fe 01       	movw	r30, r28
    2400:	ed 59       	subi	r30, 0x9D	; 157
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	98 2f       	mov	r25, r24
    2408:	91 70       	andi	r25, 0x01	; 1
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	63 e0       	ldi	r22, 0x03	; 3
    240e:	49 2f       	mov	r20, r25
    2410:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2414:	fe 01       	movw	r30, r28
    2416:	ed 59       	subi	r30, 0x9D	; 157
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 81       	ld	r24, Z
    241c:	88 2f       	mov	r24, r24
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	82 70       	andi	r24, 0x02	; 2
    2422:	90 70       	andi	r25, 0x00	; 0
    2424:	95 95       	asr	r25
    2426:	87 95       	ror	r24
    2428:	98 2f       	mov	r25, r24
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	64 e0       	ldi	r22, 0x04	; 4
    242e:	49 2f       	mov	r20, r25
    2430:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2434:	fe 01       	movw	r30, r28
    2436:	ed 59       	subi	r30, 0x9D	; 157
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	80 81       	ld	r24, Z
    243c:	88 2f       	mov	r24, r24
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	84 70       	andi	r24, 0x04	; 4
    2442:	90 70       	andi	r25, 0x00	; 0
    2444:	95 95       	asr	r25
    2446:	87 95       	ror	r24
    2448:	95 95       	asr	r25
    244a:	87 95       	ror	r24
    244c:	98 2f       	mov	r25, r24
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	65 e0       	ldi	r22, 0x05	; 5
    2452:	49 2f       	mov	r20, r25
    2454:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2458:	fe 01       	movw	r30, r28
    245a:	ed 59       	subi	r30, 0x9D	; 157
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	80 81       	ld	r24, Z
    2460:	88 2f       	mov	r24, r24
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	88 70       	andi	r24, 0x08	; 8
    2466:	90 70       	andi	r25, 0x00	; 0
    2468:	95 95       	asr	r25
    246a:	87 95       	ror	r24
    246c:	95 95       	asr	r25
    246e:	87 95       	ror	r24
    2470:	95 95       	asr	r25
    2472:	87 95       	ror	r24
    2474:	98 2f       	mov	r25, r24
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	66 e0       	ldi	r22, 0x06	; 6
    247a:	49 2f       	mov	r20, r25
    247c:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	a0 e8       	ldi	r26, 0x80	; 128
    2486:	bf e3       	ldi	r27, 0x3F	; 63
    2488:	89 8f       	std	Y+25, r24	; 0x19
    248a:	9a 8f       	std	Y+26, r25	; 0x1a
    248c:	ab 8f       	std	Y+27, r26	; 0x1b
    248e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2490:	69 8d       	ldd	r22, Y+25	; 0x19
    2492:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2494:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2496:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	4a e7       	ldi	r20, 0x7A	; 122
    249e:	55 e4       	ldi	r21, 0x45	; 69
    24a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	8d 8b       	std	Y+21, r24	; 0x15
    24aa:	9e 8b       	std	Y+22, r25	; 0x16
    24ac:	af 8b       	std	Y+23, r26	; 0x17
    24ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24b0:	6d 89       	ldd	r22, Y+21	; 0x15
    24b2:	7e 89       	ldd	r23, Y+22	; 0x16
    24b4:	8f 89       	ldd	r24, Y+23	; 0x17
    24b6:	98 8d       	ldd	r25, Y+24	; 0x18
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e8       	ldi	r20, 0x80	; 128
    24be:	5f e3       	ldi	r21, 0x3F	; 63
    24c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24c4:	88 23       	and	r24, r24
    24c6:	2c f4       	brge	.+10     	; 0x24d2 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	9c 8b       	std	Y+20, r25	; 0x14
    24ce:	8b 8b       	std	Y+19, r24	; 0x13
    24d0:	3f c0       	rjmp	.+126    	; 0x2550 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    24d2:	6d 89       	ldd	r22, Y+21	; 0x15
    24d4:	7e 89       	ldd	r23, Y+22	; 0x16
    24d6:	8f 89       	ldd	r24, Y+23	; 0x17
    24d8:	98 8d       	ldd	r25, Y+24	; 0x18
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	3f ef       	ldi	r19, 0xFF	; 255
    24de:	4f e7       	ldi	r20, 0x7F	; 127
    24e0:	57 e4       	ldi	r21, 0x47	; 71
    24e2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24e6:	18 16       	cp	r1, r24
    24e8:	4c f5       	brge	.+82     	; 0x253c <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ea:	69 8d       	ldd	r22, Y+25	; 0x19
    24ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e2       	ldi	r20, 0x20	; 32
    24f8:	51 e4       	ldi	r21, 0x41	; 65
    24fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	bc 01       	movw	r22, r24
    2504:	cd 01       	movw	r24, r26
    2506:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9c 8b       	std	Y+20, r25	; 0x14
    2510:	8b 8b       	std	Y+19, r24	; 0x13
    2512:	0f c0       	rjmp	.+30     	; 0x2532 <LCD_displayCharacter+0x7be>
    2514:	80 e9       	ldi	r24, 0x90	; 144
    2516:	91 e0       	ldi	r25, 0x01	; 1
    2518:	9a 8b       	std	Y+18, r25	; 0x12
    251a:	89 8b       	std	Y+17, r24	; 0x11
    251c:	89 89       	ldd	r24, Y+17	; 0x11
    251e:	9a 89       	ldd	r25, Y+18	; 0x12
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <LCD_displayCharacter+0x7ac>
    2524:	9a 8b       	std	Y+18, r25	; 0x12
    2526:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2528:	8b 89       	ldd	r24, Y+19	; 0x13
    252a:	9c 89       	ldd	r25, Y+20	; 0x14
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	9c 8b       	std	Y+20, r25	; 0x14
    2530:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2532:	8b 89       	ldd	r24, Y+19	; 0x13
    2534:	9c 89       	ldd	r25, Y+20	; 0x14
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	69 f7       	brne	.-38     	; 0x2514 <LCD_displayCharacter+0x7a0>
    253a:	14 c0       	rjmp	.+40     	; 0x2564 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253c:	6d 89       	ldd	r22, Y+21	; 0x15
    253e:	7e 89       	ldd	r23, Y+22	; 0x16
    2540:	8f 89       	ldd	r24, Y+23	; 0x17
    2542:	98 8d       	ldd	r25, Y+24	; 0x18
    2544:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9c 8b       	std	Y+20, r25	; 0x14
    254e:	8b 8b       	std	Y+19, r24	; 0x13
    2550:	8b 89       	ldd	r24, Y+19	; 0x13
    2552:	9c 89       	ldd	r25, Y+20	; 0x14
    2554:	98 8b       	std	Y+16, r25	; 0x10
    2556:	8f 87       	std	Y+15, r24	; 0x0f
    2558:	8f 85       	ldd	r24, Y+15	; 0x0f
    255a:	98 89       	ldd	r25, Y+16	; 0x10
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <LCD_displayCharacter+0x7e8>
    2560:	98 8b       	std	Y+16, r25	; 0x10
    2562:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	62 e0       	ldi	r22, 0x02	; 2
    2568:	40 e0       	ldi	r20, 0x00	; 0
    256a:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	a0 e8       	ldi	r26, 0x80	; 128
    2574:	bf e3       	ldi	r27, 0x3F	; 63
    2576:	8b 87       	std	Y+11, r24	; 0x0b
    2578:	9c 87       	std	Y+12, r25	; 0x0c
    257a:	ad 87       	std	Y+13, r26	; 0x0d
    257c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2580:	7c 85       	ldd	r23, Y+12	; 0x0c
    2582:	8d 85       	ldd	r24, Y+13	; 0x0d
    2584:	9e 85       	ldd	r25, Y+14	; 0x0e
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	4a e7       	ldi	r20, 0x7A	; 122
    258c:	55 e4       	ldi	r21, 0x45	; 69
    258e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	8f 83       	std	Y+7, r24	; 0x07
    2598:	98 87       	std	Y+8, r25	; 0x08
    259a:	a9 87       	std	Y+9, r26	; 0x09
    259c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    259e:	6f 81       	ldd	r22, Y+7	; 0x07
    25a0:	78 85       	ldd	r23, Y+8	; 0x08
    25a2:	89 85       	ldd	r24, Y+9	; 0x09
    25a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e8       	ldi	r20, 0x80	; 128
    25ac:	5f e3       	ldi	r21, 0x3F	; 63
    25ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25b2:	88 23       	and	r24, r24
    25b4:	2c f4       	brge	.+10     	; 0x25c0 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	9e 83       	std	Y+6, r25	; 0x06
    25bc:	8d 83       	std	Y+5, r24	; 0x05
    25be:	3f c0       	rjmp	.+126    	; 0x263e <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    25c0:	6f 81       	ldd	r22, Y+7	; 0x07
    25c2:	78 85       	ldd	r23, Y+8	; 0x08
    25c4:	89 85       	ldd	r24, Y+9	; 0x09
    25c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	3f ef       	ldi	r19, 0xFF	; 255
    25cc:	4f e7       	ldi	r20, 0x7F	; 127
    25ce:	57 e4       	ldi	r21, 0x47	; 71
    25d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25d4:	18 16       	cp	r1, r24
    25d6:	4c f5       	brge	.+82     	; 0x262a <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25da:	7c 85       	ldd	r23, Y+12	; 0x0c
    25dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25de:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e2       	ldi	r20, 0x20	; 32
    25e6:	51 e4       	ldi	r21, 0x41	; 65
    25e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	bc 01       	movw	r22, r24
    25f2:	cd 01       	movw	r24, r26
    25f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	9e 83       	std	Y+6, r25	; 0x06
    25fe:	8d 83       	std	Y+5, r24	; 0x05
    2600:	0f c0       	rjmp	.+30     	; 0x2620 <LCD_displayCharacter+0x8ac>
    2602:	80 e9       	ldi	r24, 0x90	; 144
    2604:	91 e0       	ldi	r25, 0x01	; 1
    2606:	9c 83       	std	Y+4, r25	; 0x04
    2608:	8b 83       	std	Y+3, r24	; 0x03
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	9c 81       	ldd	r25, Y+4	; 0x04
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	f1 f7       	brne	.-4      	; 0x260e <LCD_displayCharacter+0x89a>
    2612:	9c 83       	std	Y+4, r25	; 0x04
    2614:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2616:	8d 81       	ldd	r24, Y+5	; 0x05
    2618:	9e 81       	ldd	r25, Y+6	; 0x06
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	9e 83       	std	Y+6, r25	; 0x06
    261e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2620:	8d 81       	ldd	r24, Y+5	; 0x05
    2622:	9e 81       	ldd	r25, Y+6	; 0x06
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	69 f7       	brne	.-38     	; 0x2602 <LCD_displayCharacter+0x88e>
    2628:	14 c0       	rjmp	.+40     	; 0x2652 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262a:	6f 81       	ldd	r22, Y+7	; 0x07
    262c:	78 85       	ldd	r23, Y+8	; 0x08
    262e:	89 85       	ldd	r24, Y+9	; 0x09
    2630:	9a 85       	ldd	r25, Y+10	; 0x0a
    2632:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	9e 83       	std	Y+6, r25	; 0x06
    263c:	8d 83       	std	Y+5, r24	; 0x05
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	9e 81       	ldd	r25, Y+6	; 0x06
    2642:	9a 83       	std	Y+2, r25	; 0x02
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	9a 81       	ldd	r25, Y+2	; 0x02
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	f1 f7       	brne	.-4      	; 0x264a <LCD_displayCharacter+0x8d6>
    264e:	9a 83       	std	Y+2, r25	; 0x02
    2650:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2652:	cd 59       	subi	r28, 0x9D	; 157
    2654:	df 4f       	sbci	r29, 0xFF	; 255
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	1f 91       	pop	r17
    2666:	0f 91       	pop	r16
    2668:	08 95       	ret

0000266a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	00 d0       	rcall	.+0      	; 0x2670 <LCD_displayString+0x6>
    2670:	0f 92       	push	r0
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	9b 83       	std	Y+3, r25	; 0x03
    2678:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    267a:	19 82       	std	Y+1, r1	; 0x01
    267c:	0e c0       	rjmp	.+28     	; 0x269a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	9b 81       	ldd	r25, Y+3	; 0x03
    2688:	fc 01       	movw	r30, r24
    268a:	e2 0f       	add	r30, r18
    268c:	f3 1f       	adc	r31, r19
    268e:	80 81       	ld	r24, Z
    2690:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayCharacter>
		i++;
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	8f 5f       	subi	r24, 0xFF	; 255
    2698:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	9b 81       	ldd	r25, Y+3	; 0x03
    26a4:	fc 01       	movw	r30, r24
    26a6:	e2 0f       	add	r30, r18
    26a8:	f3 1f       	adc	r31, r19
    26aa:	80 81       	ld	r24, Z
    26ac:	88 23       	and	r24, r24
    26ae:	39 f7       	brne	.-50     	; 0x267e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <LCD_moveCursor+0x6>
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <LCD_moveCursor+0x8>
    26c4:	0f 92       	push	r0
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	8a 83       	std	Y+2, r24	; 0x02
    26cc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	28 2f       	mov	r18, r24
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	3d 83       	std	Y+5, r19	; 0x05
    26d6:	2c 83       	std	Y+4, r18	; 0x04
    26d8:	8c 81       	ldd	r24, Y+4	; 0x04
    26da:	9d 81       	ldd	r25, Y+5	; 0x05
    26dc:	81 30       	cpi	r24, 0x01	; 1
    26de:	91 05       	cpc	r25, r1
    26e0:	c1 f0       	breq	.+48     	; 0x2712 <LCD_moveCursor+0x56>
    26e2:	2c 81       	ldd	r18, Y+4	; 0x04
    26e4:	3d 81       	ldd	r19, Y+5	; 0x05
    26e6:	22 30       	cpi	r18, 0x02	; 2
    26e8:	31 05       	cpc	r19, r1
    26ea:	2c f4       	brge	.+10     	; 0x26f6 <LCD_moveCursor+0x3a>
    26ec:	8c 81       	ldd	r24, Y+4	; 0x04
    26ee:	9d 81       	ldd	r25, Y+5	; 0x05
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	61 f0       	breq	.+24     	; 0x270c <LCD_moveCursor+0x50>
    26f4:	19 c0       	rjmp	.+50     	; 0x2728 <LCD_moveCursor+0x6c>
    26f6:	2c 81       	ldd	r18, Y+4	; 0x04
    26f8:	3d 81       	ldd	r19, Y+5	; 0x05
    26fa:	22 30       	cpi	r18, 0x02	; 2
    26fc:	31 05       	cpc	r19, r1
    26fe:	69 f0       	breq	.+26     	; 0x271a <LCD_moveCursor+0x5e>
    2700:	8c 81       	ldd	r24, Y+4	; 0x04
    2702:	9d 81       	ldd	r25, Y+5	; 0x05
    2704:	83 30       	cpi	r24, 0x03	; 3
    2706:	91 05       	cpc	r25, r1
    2708:	61 f0       	breq	.+24     	; 0x2722 <LCD_moveCursor+0x66>
    270a:	0e c0       	rjmp	.+28     	; 0x2728 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	0b c0       	rjmp	.+22     	; 0x2728 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2712:	8b 81       	ldd	r24, Y+3	; 0x03
    2714:	80 5c       	subi	r24, 0xC0	; 192
    2716:	89 83       	std	Y+1, r24	; 0x01
    2718:	07 c0       	rjmp	.+14     	; 0x2728 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	80 5f       	subi	r24, 0xF0	; 240
    271e:	89 83       	std	Y+1, r24	; 0x01
    2720:	03 c0       	rjmp	.+6      	; 0x2728 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	80 5b       	subi	r24, 0xB0	; 176
    2726:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	80 68       	ori	r24, 0x80	; 128
    272c:	0e 94 3f 0a 	call	0x147e	; 0x147e <LCD_sendCommand>
}
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	00 d0       	rcall	.+0      	; 0x2746 <LCD_displayStringRowColumn+0x6>
    2746:	00 d0       	rcall	.+0      	; 0x2748 <LCD_displayStringRowColumn+0x8>
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	89 83       	std	Y+1, r24	; 0x01
    274e:	6a 83       	std	Y+2, r22	; 0x02
    2750:	5c 83       	std	Y+4, r21	; 0x04
    2752:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	6a 81       	ldd	r22, Y+2	; 0x02
    2758:	0e 94 5e 13 	call	0x26bc	; 0x26bc <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	9c 81       	ldd	r25, Y+4	; 0x04
    2760:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayString>
}
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	08 95       	ret

00002772 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2772:	df 93       	push	r29
    2774:	cf 93       	push	r28
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
    277a:	62 97       	sbiw	r28, 0x12	; 18
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	cd bf       	out	0x3d, r28	; 61
    2786:	9a 8b       	std	Y+18, r25	; 0x12
    2788:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    278a:	89 89       	ldd	r24, Y+17	; 0x11
    278c:	9a 89       	ldd	r25, Y+18	; 0x12
    278e:	9e 01       	movw	r18, r28
    2790:	2f 5f       	subi	r18, 0xFF	; 255
    2792:	3f 4f       	sbci	r19, 0xFF	; 255
    2794:	b9 01       	movw	r22, r18
    2796:	4a e0       	ldi	r20, 0x0A	; 10
    2798:	50 e0       	ldi	r21, 0x00	; 0
    279a:	0e 94 1d 14 	call	0x283a	; 0x283a <itoa>
   LCD_displayString(buff); /* Display the string */
    279e:	ce 01       	movw	r24, r28
    27a0:	01 96       	adiw	r24, 0x01	; 1
    27a2:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayString>
}
    27a6:	62 96       	adiw	r28, 0x12	; 18
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	0e 94 3f 0a 	call	0x147e	; 0x147e <LCD_sendCommand>
}
    27c6:	cf 91       	pop	r28
    27c8:	df 91       	pop	r29
    27ca:	08 95       	ret

000027cc <__prologue_saves__>:
    27cc:	2f 92       	push	r2
    27ce:	3f 92       	push	r3
    27d0:	4f 92       	push	r4
    27d2:	5f 92       	push	r5
    27d4:	6f 92       	push	r6
    27d6:	7f 92       	push	r7
    27d8:	8f 92       	push	r8
    27da:	9f 92       	push	r9
    27dc:	af 92       	push	r10
    27de:	bf 92       	push	r11
    27e0:	cf 92       	push	r12
    27e2:	df 92       	push	r13
    27e4:	ef 92       	push	r14
    27e6:	ff 92       	push	r15
    27e8:	0f 93       	push	r16
    27ea:	1f 93       	push	r17
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	ca 1b       	sub	r28, r26
    27f6:	db 0b       	sbc	r29, r27
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	09 94       	ijmp

00002804 <__epilogue_restores__>:
    2804:	2a 88       	ldd	r2, Y+18	; 0x12
    2806:	39 88       	ldd	r3, Y+17	; 0x11
    2808:	48 88       	ldd	r4, Y+16	; 0x10
    280a:	5f 84       	ldd	r5, Y+15	; 0x0f
    280c:	6e 84       	ldd	r6, Y+14	; 0x0e
    280e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2810:	8c 84       	ldd	r8, Y+12	; 0x0c
    2812:	9b 84       	ldd	r9, Y+11	; 0x0b
    2814:	aa 84       	ldd	r10, Y+10	; 0x0a
    2816:	b9 84       	ldd	r11, Y+9	; 0x09
    2818:	c8 84       	ldd	r12, Y+8	; 0x08
    281a:	df 80       	ldd	r13, Y+7	; 0x07
    281c:	ee 80       	ldd	r14, Y+6	; 0x06
    281e:	fd 80       	ldd	r15, Y+5	; 0x05
    2820:	0c 81       	ldd	r16, Y+4	; 0x04
    2822:	1b 81       	ldd	r17, Y+3	; 0x03
    2824:	aa 81       	ldd	r26, Y+2	; 0x02
    2826:	b9 81       	ldd	r27, Y+1	; 0x01
    2828:	ce 0f       	add	r28, r30
    282a:	d1 1d       	adc	r29, r1
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	ed 01       	movw	r28, r26
    2838:	08 95       	ret

0000283a <itoa>:
    283a:	fb 01       	movw	r30, r22
    283c:	9f 01       	movw	r18, r30
    283e:	e8 94       	clt
    2840:	42 30       	cpi	r20, 0x02	; 2
    2842:	c4 f0       	brlt	.+48     	; 0x2874 <itoa+0x3a>
    2844:	45 32       	cpi	r20, 0x25	; 37
    2846:	b4 f4       	brge	.+44     	; 0x2874 <itoa+0x3a>
    2848:	4a 30       	cpi	r20, 0x0A	; 10
    284a:	29 f4       	brne	.+10     	; 0x2856 <itoa+0x1c>
    284c:	97 fb       	bst	r25, 7
    284e:	1e f4       	brtc	.+6      	; 0x2856 <itoa+0x1c>
    2850:	90 95       	com	r25
    2852:	81 95       	neg	r24
    2854:	9f 4f       	sbci	r25, 0xFF	; 255
    2856:	64 2f       	mov	r22, r20
    2858:	77 27       	eor	r23, r23
    285a:	0e 94 4e 14 	call	0x289c	; 0x289c <__udivmodhi4>
    285e:	80 5d       	subi	r24, 0xD0	; 208
    2860:	8a 33       	cpi	r24, 0x3A	; 58
    2862:	0c f0       	brlt	.+2      	; 0x2866 <itoa+0x2c>
    2864:	89 5d       	subi	r24, 0xD9	; 217
    2866:	81 93       	st	Z+, r24
    2868:	cb 01       	movw	r24, r22
    286a:	00 97       	sbiw	r24, 0x00	; 0
    286c:	a1 f7       	brne	.-24     	; 0x2856 <itoa+0x1c>
    286e:	16 f4       	brtc	.+4      	; 0x2874 <itoa+0x3a>
    2870:	5d e2       	ldi	r21, 0x2D	; 45
    2872:	51 93       	st	Z+, r21
    2874:	10 82       	st	Z, r1
    2876:	c9 01       	movw	r24, r18
    2878:	0c 94 3e 14 	jmp	0x287c	; 0x287c <strrev>

0000287c <strrev>:
    287c:	dc 01       	movw	r26, r24
    287e:	fc 01       	movw	r30, r24
    2880:	67 2f       	mov	r22, r23
    2882:	71 91       	ld	r23, Z+
    2884:	77 23       	and	r23, r23
    2886:	e1 f7       	brne	.-8      	; 0x2880 <strrev+0x4>
    2888:	32 97       	sbiw	r30, 0x02	; 2
    288a:	04 c0       	rjmp	.+8      	; 0x2894 <strrev+0x18>
    288c:	7c 91       	ld	r23, X
    288e:	6d 93       	st	X+, r22
    2890:	70 83       	st	Z, r23
    2892:	62 91       	ld	r22, -Z
    2894:	ae 17       	cp	r26, r30
    2896:	bf 07       	cpc	r27, r31
    2898:	c8 f3       	brcs	.-14     	; 0x288c <strrev+0x10>
    289a:	08 95       	ret

0000289c <__udivmodhi4>:
    289c:	aa 1b       	sub	r26, r26
    289e:	bb 1b       	sub	r27, r27
    28a0:	51 e1       	ldi	r21, 0x11	; 17
    28a2:	07 c0       	rjmp	.+14     	; 0x28b2 <__udivmodhi4_ep>

000028a4 <__udivmodhi4_loop>:
    28a4:	aa 1f       	adc	r26, r26
    28a6:	bb 1f       	adc	r27, r27
    28a8:	a6 17       	cp	r26, r22
    28aa:	b7 07       	cpc	r27, r23
    28ac:	10 f0       	brcs	.+4      	; 0x28b2 <__udivmodhi4_ep>
    28ae:	a6 1b       	sub	r26, r22
    28b0:	b7 0b       	sbc	r27, r23

000028b2 <__udivmodhi4_ep>:
    28b2:	88 1f       	adc	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	5a 95       	dec	r21
    28b8:	a9 f7       	brne	.-22     	; 0x28a4 <__udivmodhi4_loop>
    28ba:	80 95       	com	r24
    28bc:	90 95       	com	r25
    28be:	bc 01       	movw	r22, r24
    28c0:	cd 01       	movw	r24, r26
    28c2:	08 95       	ret

000028c4 <_exit>:
    28c4:	f8 94       	cli

000028c6 <__stop_program>:
    28c6:	ff cf       	rjmp	.-2      	; 0x28c6 <__stop_program>
